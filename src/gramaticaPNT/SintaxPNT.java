
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 25 20:50:08 CST 2020
//----------------------------------------------------

package gramaticaPNT;

import java_cup.runtime.Symbol;
import pollitos.*;
import java.util.ArrayList;
import OperacionesPNT.*;
import InterfazEditorTexto.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 25 20:50:08 CST 2020
  */
public class SintaxPNT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPNT() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\003\003\000\002\042\002" +
    "\000\002\021\012\000\002\043\002\000\002\021\010\000" +
    "\002\044\002\000\002\021\014\000\002\045\002\000\002" +
    "\021\010\000\002\046\002\000\002\021\010\000\002\047" +
    "\002\000\002\021\012\000\002\050\002\000\002\021\012" +
    "\000\002\021\002\000\002\021\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\002\000\002\025\004\000\002\051\002" +
    "\000\002\030\006\000\002\052\002\000\002\030\006\000" +
    "\002\053\002\000\002\030\006\000\002\054\002\000\002" +
    "\030\006\000\002\030\003\000\002\030\003\000\002\030" +
    "\002\000\002\030\004\000\002\055\002\000\002\031\006" +
    "\000\002\056\002\000\002\031\006\000\002\057\002\000" +
    "\002\031\006\000\002\060\002\000\002\031\006\000\002" +
    "\031\003\000\002\031\003\000\002\031\002\000\002\031" +
    "\004\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\002\000\002" +
    "\026\004\000\002\061\002\000\002\004\010\000\002\004" +
    "\002\000\002\062\002\000\002\005\012\000\002\063\002" +
    "\000\002\005\006\000\002\005\002\000\002\064\002\000" +
    "\002\022\006\000\002\065\002\000\002\022\010\000\002" +
    "\066\002\000\002\022\010\000\002\022\002\000\002\067" +
    "\002\000\002\010\013\000\002\070\002\000\002\071\002" +
    "\000\002\011\020\000\002\072\002\000\002\073\002\000" +
    "\002\074\002\000\002\011\015\000\002\075\002\000\002" +
    "\076\002\000\002\077\002\000\002\100\002\000\002\011" +
    "\016\000\002\011\004\000\002\011\002\000\002\011\003" +
    "\000\002\101\002\000\002\102\002\000\002\103\002\000" +
    "\002\020\012\000\002\104\002\000\002\020\004\000\002" +
    "\007\006\000\002\007\010\000\002\007\006\000\002\007" +
    "\006\000\002\105\002\000\002\034\005\000\002\032\003" +
    "\000\002\032\003\000\002\106\002\000\002\033\006\000" +
    "\002\107\002\000\002\033\006\000\002\033\002\000\002" +
    "\033\003\000\002\035\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\004\000\002\036\003" +
    "\000\002\036\005\000\002\037\003\000\002\037\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\003\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\003" +
    "\000\002\017\003\000\002\017\002\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\003\007\033\006\001\002\000\004\041" +
    "\144\001\002\000\004\002\143\001\002\000\004\024\010" +
    "\001\002\000\006\002\uffff\041\ufffd\001\002\000\014\003" +
    "\013\025\uffee\034\015\035\011\036\014\001\002\000\004" +
    "\047\114\001\002\000\004\025\113\001\002\000\014\003" +
    "\013\025\uffee\034\015\035\011\036\014\001\002\000\004" +
    "\047\057\001\002\000\004\047\016\001\002\000\010\004" +
    "\ufffa\006\ufffa\012\020\001\002\000\006\004\040\006\uffbe" +
    "\001\002\000\024\003\023\004\uffd8\006\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\046\022\047\021\052\uffd8\001\002\000\016" +
    "\004\uffda\006\uffda\026\uffda\027\uffda\030\uffda\052\uffda\001" +
    "\002\000\016\004\uffd9\006\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\052\uffd9\001\002\000\024\003\023\004\uffd8\006\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\046\022\047\021\052\uffd8\001\002" +
    "\000\016\004\ufffc\006\ufffc\026\025\027\027\030\031\052" +
    "\030\001\002\000\024\003\uffe2\004\uffe2\006\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\046\uffe2\047\uffe2\052\uffe2\001\002\000" +
    "\006\004\040\006\uffbe\001\002\000\024\003\uffe0\004\uffe0" +
    "\006\uffe0\026\uffe0\027\uffe0\030\uffe0\046\uffe0\047\uffe0\052" +
    "\uffe0\001\002\000\024\003\uffdc\004\uffdc\006\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\046\uffdc\047\uffdc\052\uffdc\001\002\000" +
    "\024\003\uffde\004\uffde\006\uffde\026\uffde\027\uffde\030\uffde" +
    "\046\uffde\047\uffde\052\uffde\001\002\000\024\003\023\004" +
    "\uffd8\006\uffd8\026\uffd8\027\uffd8\030\uffd8\046\022\047\021" +
    "\052\uffd8\001\002\000\016\004\uffdd\006\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\052\uffdd\001\002\000\024\003\023\004\uffd8" +
    "\006\uffd8\026\uffd8\027\uffd8\030\uffd8\046\022\047\021\052" +
    "\uffd8\001\002\000\016\004\uffdb\006\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\052\uffdb\001\002\000\024\003\023\004\uffd8\006" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\046\022\047\021\052\uffd8" +
    "\001\002\000\016\004\uffdf\006\uffdf\026\uffdf\027\uffdf\030" +
    "\031\052\030\001\002\000\004\047\044\001\002\000\004" +
    "\006\042\001\002\000\014\003\013\025\uffee\034\015\035" +
    "\011\036\014\001\002\000\004\025\ufffb\001\002\000\004" +
    "\012\045\001\002\000\024\003\023\004\uffd8\006\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\046\022\047\021\052\uffd8\001\002" +
    "\000\016\004\uffc0\006\uffc0\026\025\027\027\030\031\052" +
    "\030\001\002\000\006\004\040\006\uffbe\001\002\000\004" +
    "\006\uffbf\001\002\000\024\003\023\004\uffd8\006\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\046\022\047\021\052\uffd8\001\002" +
    "\000\016\004\uffe1\006\uffe1\026\uffe1\027\uffe1\030\031\052" +
    "\030\001\002\000\016\004\uffd7\006\uffd7\026\025\027\027" +
    "\030\031\052\030\001\002\000\004\006\055\001\002\000" +
    "\014\003\013\025\uffee\034\015\035\011\036\014\001\002" +
    "\000\004\025\ufff9\001\002\000\010\004\ufff4\006\ufff4\012" +
    "\060\001\002\000\006\037\100\040\101\001\002\000\006" +
    "\004\062\006\uffb2\001\002\000\004\047\066\001\002\000" +
    "\004\006\064\001\002\000\014\003\013\025\uffee\034\015" +
    "\035\011\036\014\001\002\000\004\025\ufff3\001\002\000" +
    "\010\004\uffb8\006\uffb8\012\070\001\002\000\006\004\062" +
    "\006\uffb2\001\002\000\006\037\071\040\072\001\002\000" +
    "\006\004\uffb6\006\uffb6\001\002\000\006\004\uffb4\006\uffb4" +
    "\001\002\000\006\004\062\006\uffb2\001\002\000\004\006" +
    "\uffb3\001\002\000\006\004\062\006\uffb2\001\002\000\004" +
    "\006\uffb5\001\002\000\004\006\uffb7\001\002\000\006\004" +
    "\ufff2\006\ufff2\001\002\000\006\004\ufff0\006\ufff0\001\002" +
    "\000\006\004\062\006\uffb2\001\002\000\004\006\104\001" +
    "\002\000\014\003\013\025\uffee\034\015\035\011\036\014" +
    "\001\002\000\004\025\uffef\001\002\000\006\004\062\006" +
    "\uffb2\001\002\000\004\006\110\001\002\000\014\003\013" +
    "\025\uffee\034\015\035\011\036\014\001\002\000\004\025" +
    "\ufff1\001\002\000\004\025\uffed\001\002\000\004\041\ufffe" +
    "\001\002\000\010\004\ufff6\006\ufff6\012\116\001\002\000" +
    "\006\004\124\006\uffb9\001\002\000\004\007\117\001\002" +
    "\000\004\047\120\001\002\000\004\007\121\001\002\000" +
    "\006\004\ufff8\006\ufff8\001\002\000\006\004\124\006\uffb9" +
    "\001\002\000\004\006\136\001\002\000\004\047\125\001" +
    "\002\000\010\004\uffbb\006\uffbb\012\127\001\002\000\006" +
    "\004\124\006\uffb9\001\002\000\004\007\130\001\002\000" +
    "\004\047\131\001\002\000\004\007\132\001\002\000\006" +
    "\004\uffbd\006\uffbd\001\002\000\006\004\124\006\uffb9\001" +
    "\002\000\004\006\uffbc\001\002\000\004\006\uffba\001\002" +
    "\000\014\003\013\025\uffee\034\015\035\011\036\014\001" +
    "\002\000\004\025\ufff7\001\002\000\004\006\141\001\002" +
    "\000\014\003\013\025\uffee\034\015\035\011\036\014\001" +
    "\002\000\004\025\ufff5\001\002\000\004\002\001\001\002" +
    "\000\004\022\146\001\002\000\004\002\000\001\002\000" +
    "\004\047\147\001\002\000\004\023\uffb1\001\002\000\004" +
    "\023\151\001\002\000\004\024\152\001\002\000\016\003" +
    "\155\025\uffa2\042\154\043\161\045\160\047\153\001\002" +
    "\000\004\012\350\001\002\000\004\022\261\001\002\000" +
    "\006\021\uffa1\025\uffa1\001\002\000\004\025\256\001\002" +
    "\000\020\003\155\021\uffa2\025\uffa2\042\154\043\161\045" +
    "\160\047\153\001\002\000\004\022\242\001\002\000\004" +
    "\022\162\001\002\000\014\003\165\037\167\040\171\046" +
    "\163\047\164\001\002\000\026\003\uff93\011\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\023\uff93\050\uff93\051" +
    "\uff93\001\002\000\026\003\uff8b\011\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\017\uff94\023\uff8b\050\uff8b\051\uff8b\001" +
    "\002\000\014\003\165\037\167\040\171\046\163\047\164" +
    "\001\002\000\016\011\230\013\232\014\235\015\234\016" +
    "\236\017\233\001\002\000\012\003\uff8a\023\uff8a\050\uff8a" +
    "\051\uff8a\001\002\000\004\023\uffac\001\002\000\012\003" +
    "\uff89\023\uff89\050\uff89\051\uff89\001\002\000\012\003\uff96" +
    "\023\uff96\050\uff96\051\uff96\001\002\000\012\003\174\023" +
    "\uff8e\050\175\051\177\001\002\000\004\023\uff8d\001\002" +
    "\000\014\003\165\037\167\040\171\046\163\047\164\001" +
    "\002\000\004\023\uff95\001\002\000\014\003\165\037\167" +
    "\040\171\046\163\047\164\001\002\000\012\003\uff90\023" +
    "\uff90\050\uff90\051\uff90\001\002\000\012\003\174\023\uff8e" +
    "\050\175\051\177\001\002\000\004\023\uff8f\001\002\000" +
    "\012\003\uff92\023\uff92\050\uff92\051\uff92\001\002\000\012" +
    "\003\174\023\uff8e\050\175\051\177\001\002\000\004\023" +
    "\uff91\001\002\000\004\023\207\001\002\000\004\020\210" +
    "\001\002\000\016\003\155\021\uffa2\042\154\043\161\045" +
    "\160\047\153\001\002\000\004\021\uffab\001\002\000\004" +
    "\021\213\001\002\000\022\003\uffaa\021\uffaa\025\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa\001\002\000\022" +
    "\003\uff9c\021\uff9c\025\uff9c\042\uff9c\043\uff9c\044\216\045" +
    "\uff9c\047\uff9c\001\002\000\020\003\155\021\uffa2\025\uffa2" +
    "\042\154\043\161\045\160\047\153\001\002\000\004\020" +
    "\220\001\002\000\006\021\uffa9\025\uffa9\001\002\000\016" +
    "\003\uffa0\021\uffa0\042\uffa0\043\uffa0\045\uffa0\047\uffa0\001" +
    "\002\000\016\003\155\021\uffa2\042\154\043\161\045\160" +
    "\047\153\001\002\000\004\021\uff9f\001\002\000\004\021" +
    "\224\001\002\000\020\003\uff9e\021\uff9e\025\uff9e\042\uff9e" +
    "\043\uff9e\045\uff9e\047\uff9e\001\002\000\020\003\155\021" +
    "\uffa2\025\uffa2\042\154\043\161\045\160\047\153\001\002" +
    "\000\006\021\uff9d\025\uff9d\001\002\000\006\021\uff9b\025" +
    "\uff9b\001\002\000\006\046\uff77\047\uff77\001\002\000\006" +
    "\046\163\047\237\001\002\000\006\046\uff76\047\uff76\001" +
    "\002\000\006\046\uff72\047\uff72\001\002\000\006\046\uff74" +
    "\047\uff74\001\002\000\006\046\uff75\047\uff75\001\002\000" +
    "\006\046\uff73\047\uff73\001\002\000\012\003\uff94\023\uff94" +
    "\050\uff94\051\uff94\001\002\000\012\003\uff8c\023\uff8c\050" +
    "\uff8c\051\uff8c\001\002\000\012\003\uff88\023\uff88\050\uff88" +
    "\051\uff88\001\002\000\014\003\uffa8\037\uffa8\040\uffa8\046" +
    "\uffa8\047\uffa8\001\002\000\014\003\165\037\167\040\171" +
    "\046\163\047\164\001\002\000\004\023\uffa7\001\002\000" +
    "\004\023\246\001\002\000\004\020\247\001\002\000\016" +
    "\003\uffa6\021\uffa6\042\uffa6\043\uffa6\045\uffa6\047\uffa6\001" +
    "\002\000\016\003\155\021\uffa2\042\154\043\161\045\160" +
    "\047\153\001\002\000\004\021\uffa5\001\002\000\004\021" +
    "\253\001\002\000\020\003\155\021\uffa2\025\uffa2\042\154" +
    "\043\161\045\160\047\153\001\002\000\006\021\uffa4\025" +
    "\uffa4\001\002\000\006\021\uffa3\025\uffa3\001\002\000\006" +
    "\002\uff78\041\144\001\002\000\004\002\uffb0\001\002\000" +
    "\004\002\uff79\001\002\000\006\007\264\047\262\001\002" +
    "\000\004\004\uff87\001\002\000\004\004\267\001\002\000" +
    "\004\047\265\001\002\000\004\007\266\001\002\000\004" +
    "\004\uff86\001\002\000\006\007\272\047\270\001\002\000" +
    "\004\004\uff85\001\002\000\004\004\275\001\002\000\004" +
    "\047\273\001\002\000\004\007\274\001\002\000\004\004" +
    "\uff84\001\002\000\022\003\301\004\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\046\277\047\276\052\uffcc\001\002\000\016\004" +
    "\uffce\010\345\026\uffce\027\uffce\030\uffce\052\uffce\001\002" +
    "\000\016\004\uffcd\010\342\026\uffcd\027\uffcd\030\uffcd\052" +
    "\uffcd\001\002\000\014\004\uff7f\026\315\027\316\030\320" +
    "\052\317\001\002\000\024\003\301\004\uffcc\023\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\046\322\047\323\052\uffcc\001\002" +
    "\000\004\004\uffaf\001\002\000\004\004\304\001\002\000" +
    "\022\003\301\023\uffcc\026\uffcc\027\uffcc\030\uffcc\046\306" +
    "\047\305\052\uffcc\001\002\000\016\010\336\023\uffce\026" +
    "\uffce\027\uffce\030\uffce\052\uffce\001\002\000\016\010\333" +
    "\023\uffcd\026\uffcd\027\uffcd\030\uffcd\052\uffcd\001\002\000" +
    "\014\023\uff7a\026\315\027\316\030\320\052\317\001\002" +
    "\000\004\023\311\001\002\000\004\006\312\001\002\000" +
    "\020\003\uffae\021\uffae\025\uffae\042\uffae\043\uffae\045\uffae" +
    "\047\uffae\001\002\000\020\003\155\021\uffa2\025\uffa2\042" +
    "\154\043\161\045\160\047\153\001\002\000\006\021\uffad" +
    "\025\uffad\001\002\000\024\003\uffd6\004\uffd6\023\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\046\uffd6\047\uffd6\052\uffd6\001\002" +
    "\000\024\003\uffd4\004\uffd4\023\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\046\uffd4\047\uffd4\052\uffd4\001\002\000\024\003\uffd0" +
    "\004\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\046\uffd0\047" +
    "\uffd0\052\uffd0\001\002\000\024\003\uffd2\004\uffd2\023\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\046\uffd2\047\uffd2\052\uffd2\001" +
    "\002\000\024\003\301\004\uffcc\023\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\046\322\047\323\052\uffcc\001\002\000\016\004" +
    "\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\052\uffcd\001\002" +
    "\000\016\004\uffce\023\uffce\026\uffce\027\uffce\030\uffce\052" +
    "\uffce\001\002\000\016\004\uffd1\023\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\052\uffd1\001\002\000\024\003\301\004\uffcc\023" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\046\322\047\323\052\uffcc" +
    "\001\002\000\016\004\uffcf\023\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\052\uffcf\001\002\000\024\003\301\004\uffcc\023\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\046\322\047\323\052\uffcc\001" +
    "\002\000\016\004\uffd3\023\uffd3\026\uffd3\027\uffd3\030\320" +
    "\052\317\001\002\000\024\003\301\004\uffcc\023\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\046\322\047\323\052\uffcc\001\002" +
    "\000\016\004\uffd5\023\uffd5\026\uffd5\027\uffd5\030\320\052" +
    "\317\001\002\000\006\046\334\047\335\001\002\000\004" +
    "\023\uff7d\001\002\000\004\023\uff7b\001\002\000\006\046" +
    "\337\047\340\001\002\000\004\023\uff7c\001\002\000\004" +
    "\023\uff7e\001\002\000\016\004\uffcb\023\uffcb\026\315\027" +
    "\316\030\320\052\317\001\002\000\006\046\344\047\343" +
    "\001\002\000\004\004\uff80\001\002\000\004\004\uff82\001" +
    "\002\000\006\046\347\047\346\001\002\000\004\004\uff83" +
    "\001\002\000\004\004\uff81\001\002\000\030\003\023\006" +
    "\uffd8\007\354\026\uffd8\027\uffd8\030\uffd8\037\352\040\353" +
    "\046\022\047\021\052\uffd8\001\002\000\014\006\362\026" +
    "\025\027\027\030\031\052\030\001\002\000\004\006\361" +
    "\001\002\000\004\006\360\001\002\000\004\047\355\001" +
    "\002\000\004\007\356\001\002\000\004\006\357\001\002" +
    "\000\020\003\uff99\021\uff99\025\uff99\042\uff99\043\uff99\045" +
    "\uff99\047\uff99\001\002\000\020\003\uff97\021\uff97\025\uff97" +
    "\042\uff97\043\uff97\045\uff97\047\uff97\001\002\000\020\003" +
    "\uff98\021\uff98\025\uff98\042\uff98\043\uff98\045\uff98\047\uff98" +
    "\001\002\000\020\003\uff9a\021\uff9a\025\uff9a\042\uff9a\043" +
    "\uff9a\045\uff9a\047\uff9a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\002\004\003\003\001\001\000\004\010" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\016\001\001\000\004\004" +
    "\053\001\001\000\004\030\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\052\001\001\000\004\042" +
    "\025\001\001\000\004\051\050\001\001\000\004\004\040" +
    "\001\001\000\004\052\035\001\001\000\004\054\033\001" +
    "\001\000\004\053\031\001\001\000\004\030\032\001\001" +
    "\000\002\001\001\000\004\030\034\001\001\000\002\001" +
    "\001\000\004\030\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\045\001\001" +
    "\000\004\061\046\001\001\000\004\004\047\001\001\000" +
    "\002\001\001\000\004\030\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\055\001" +
    "\001\000\002\001\001\000\004\046\060\001\001\000\002" +
    "\001\001\000\004\022\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\064\001\001\000\002\001\001" +
    "\000\004\064\066\001\001\000\004\022\076\001\001\000" +
    "\002\001\001\000\004\065\074\001\001\000\004\066\072" +
    "\001\001\000\004\022\073\001\001\000\002\001\001\000" +
    "\004\022\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\105\001\001\000\004\050\101\001\001\000" +
    "\004\022\102\001\001\000\002\001\001\000\004\021\104" +
    "\001\001\000\002\001\001\000\004\022\106\001\001\000" +
    "\002\001\001\000\004\021\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\114\001" +
    "\001\000\004\005\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\121\001\001\000" +
    "\004\005\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\125\001\001\000\004\005\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\132\001\001\000\004\005\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\156\011\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\156\011\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\165\034" +
    "\167\035\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\165\035\240\001\001\000\004\027\230\001" +
    "\001\000\002\001\001\000\004\072\205\001\001\000\002" +
    "\001\001\000\004\105\172\001\001\000\004\033\175\001" +
    "\001\000\002\001\001\000\006\032\165\035\202\001\001" +
    "\000\002\001\001\000\006\032\165\035\177\001\001\000" +
    "\004\107\200\001\001\000\004\033\201\001\001\000\002" +
    "\001\001\000\004\106\203\001\001\000\004\033\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\156\011\210\001\001\000\004\073\211\001" +
    "\001\000\002\001\001\000\004\074\213\001\001\000\006" +
    "\020\216\104\214\001\001\000\006\007\156\011\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\220" +
    "\001\001\000\006\007\156\011\221\001\001\000\004\102" +
    "\222\001\001\000\002\001\001\000\004\103\224\001\001" +
    "\000\006\007\156\011\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\242\001\001\000" +
    "\010\032\165\034\243\035\171\001\001\000\004\076\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\247\001\001\000\006\007\156\011\250\001\001\000\004" +
    "\100\251\001\001\000\002\001\001\000\006\007\156\011" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\257\017\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\277\040\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\340\001" +
    "\001\000\004\070\302\001\001\000\002\001\001\000\006" +
    "\031\306\041\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\312\001\001\000\006\007\156\011\313\001" +
    "\001\000\002\001\001\000\004\055\330\001\001\000\004" +
    "\056\326\001\001\000\004\060\324\001\001\000\004\057" +
    "\320\001\001\000\004\031\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\325\001" +
    "\001\000\002\001\001\000\004\031\327\001\001\000\002" +
    "\001\001\000\004\031\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPNT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPNT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPNT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public ArrayList<ValoresPNT> listValores;
    public ArrayList<Pintados> listPintados;
    public ArrayList<Lienzos> listLienzos;
    public ArrayList<Colores> listColores;
    public ArrayList<Tiempos> listTiempos;
    public ArrayList<CuadrosPintar> listPintar;
    public ArrayList<While> listWhiles = new ArrayList<>();
    public While ciclo = new While();
    public TablaSimbolos tabla;
    public boolean esNegativo = false;
    public CondicionesLogicas cond = new CondicionesLogicas();
    public ArrayList<OpAritmeticasWhile> listOp = new ArrayList<>();
    public ArrayList<OpAritmeticasWhile> listOp2 = new ArrayList<>();
    public ArrayList<OpAritmeticasWhile> listAux = new ArrayList<>();
    public Boolean booleanIf = null;
    public Boolean booleanWhile = null;
    public Boolean entro = true;
    public Boolean verificador = false;
    public CondicionWhile condWhile = new CondicionWhile();
    public ArrayList<CondicionWhile> listCondw = new ArrayList<>();
    public Integer contIfs = 0;
    public OpAritmeticaPintar nuevaOpX = null;
    public OpAritmeticaPintar nuevaOpY = null;
    public CasillasAPintar pintadas = new CasillasAPintar();
    public String lienzoActual;
    public static boolean todoCorrecto = true;
    public static String totalErrores = "";
    public String signoActual = "";
    public String signoActual2 = "";
    

    public SintaxPNT(AnalizadorLexico3 lex, ArrayList<ValoresPNT> listValores, TablaSimbolos tabla, ArrayList<Lienzos> listLienzos, ArrayList<Colores> listColores, ArrayList<Tiempos> listTiempos, ArrayList<CuadrosPintar> listPintar, ArrayList<Pintados> listPintados){
        super(lex);
        this.listValores = listValores;
        this.tabla = tabla;
        this.listLienzos = listLienzos;
        this.listColores = listColores;
        this.listTiempos = listTiempos;
        this.listPintar = listPintar;
        this.listPintados = listPintados;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

    public void traspasarDatos(ArrayList<OpAritmeticasWhile> list, ArrayList<OpAritmeticasWhile> aux){
        for(int i = 0; i < list.size(); i++){
            aux.add(list.get(i));
        }
        
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPNT$actions {
  private final SintaxPNT parser;

  /** Constructor */
  CUP$SintaxPNT$actions(SintaxPNT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPNT$do_action(
    int                        CUP$SintaxPNT$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPNT$parser,
    java.util.Stack            CUP$SintaxPNT$stack,
    int                        CUP$SintaxPNT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPNT$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPNT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // relacional ::= DIFERENCIA 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(6); } } RESULT=6; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // relacional ::= MAYOR_IGUAL 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(5); } } RESULT=5; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // relacional ::= MENOR_IGUAL 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(4); } } RESULT=4; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // relacional ::= MAYOR 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(3); } } RESULT=3; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // relacional ::= MENOR 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(2); } }  RESULT=2; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // relacional ::= DOBLE_IGUAL 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(1); } }  RESULT=1; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // COMA4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COMA4 ::= c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // posY ::= b2prima4 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.signoActual2 = ""; if(parser.booleanIf!=null){ if(parser.booleanIf){ parser.nuevaOpY = new OpAritmeticaPintar(parser.listOp);  } } else { parser.nuevaOpY = new OpAritmeticaPintar(parser.listOp); }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // posY ::= NUMERO RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // posY ::= ID RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // posY ::= NUMERO RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // posY ::= ID RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // posX ::= b2prima4 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.signoActual2 = ""; if(parser.booleanIf!=null){ if(parser.booleanIf){ parser.nuevaOpX = new OpAritmeticaPintar(parser.listOp); } } else { parser.nuevaOpX = new OpAritmeticaPintar(parser.listOp);  } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // posX ::= NUMERO RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b;  if(!parser.tabla.verificarId(b.toString(), parser.listValores)){ parser.totalErrores += "La variable "+b.toString()+" no existe dentro del archivo PNT. Linea: "+bleft+" Columna: "+bright+".\n"; parser.todoCorrecto = false; }    RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // posX ::= ID RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b;  if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ parser.totalErrores += "La variable "+a.toString()+" no existe dentro del archivo PNT. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false;  }     RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // posX ::= NUMERO RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b;  RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // posX ::= ID RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b;   if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ parser.totalErrores += "La variable "+a.toString()+" no existe dentro del archivo PNT. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } if(!parser.tabla.verificarId(b.toString(), parser.listValores)){ parser.totalErrores += "La variable "+b.toString()+" no existen dentro del archivo PNT. Linea: "+bleft+" Columna: "+bright+".\n"; parser.todoCorrecto = false; }        RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // idImagen ::= COMILLAS ID COMILLAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		 RESULT=a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // idImagen ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 String valor = parser.tabla.verificarUnValor(a.toString(), parser.listValores, "String",(Integer) aleft, (Integer) aright).toString(); if(valor == null){ parser.totalErrores += "La variable "+a.toString()+" no existe en el archivo PNT. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // idColor ::= COMILLAS ID COMILLAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		 RESULT=a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // idColor ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 String valor = parser.tabla.verificarUnValor(a.toString(), parser.listValores, "String",(Integer) aleft,(Integer) aright).toString(); if(valor == null){ parser.totalErrores += "La variable "+a.toString()+" no existe en el archivo PNT. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; }  RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // bools ::= error bools 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.totalErrores += "Error al momento de sentenciar una condicion logica.\n"; parser.todoCorrecto = false; RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // bools ::= FALSE 
            {
              Boolean RESULT =null;
		 if(parser.booleanWhile!= null){ if(parser.booleanWhile){ parser.condWhile.setTipo("Tipo3");  parser.condWhile.setDato1(false); } }  Boolean valor = false; RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bools ::= TRUE 
            {
              Boolean RESULT =null;
		 if(parser.booleanWhile!= null){ if(parser.booleanWhile){ parser.condWhile.setTipo("Tipo3");  parser.condWhile.setDato1(true);  } }  Boolean valor = true; RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bools ::= ID 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile!= null){ if(parser.booleanWhile){ parser.condWhile.setTipo("Tipo2");  parser.condWhile.setDato1(a); } } Boolean valor = parser.tabla.comprobarCondicionTipo2(a.toString(), parser.listValores); RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bools ::= c3 relacional c3 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.condWhile.setTipo("Tipo1");   Boolean valor = parser.tabla.comprobarCondicionTipo1(a, (Integer) b, c); RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ext ::= error 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		 parser.totalErrores += "Error al momento de encadenar una condicion AND u OR.\n"; parser.todoCorrecto = false;  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ext ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		 ArrayList<TipoEncadenamiento> booleanos = new ArrayList<>(); RESULT=booleanos;  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ext ::= OR bools NT$37 ext 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (ArrayList<TipoEncadenamiento>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> b = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		   TipoEncadenamiento tipo = new TipoEncadenamiento("OR", Boolean.valueOf(a.toString())); b.add(tipo); RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$37 ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
  if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setCadena("OR"); parser.listCondw.add(parser.condWhile); parser.condWhile = new CondicionWhile(); } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$37",69, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ext ::= AND bools NT$36 ext 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (ArrayList<TipoEncadenamiento>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> b = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  TipoEncadenamiento tipo = new TipoEncadenamiento("AND", Boolean.valueOf(a.toString())); b.add(tipo); RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$36 ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setCadena("AND"); parser.listCondw.add(parser.condWhile); parser.condWhile = new CondicionWhile(); } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$36",68, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // c3 ::= NUMERO 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  if(parser.booleanWhile != null){ if(parser.booleanWhile){ if(parser.condWhile.getDato1()!=null){ parser.condWhile.setDato2(a); } else { parser.condWhile.setDato1(a); } } }  Objeto nuevo = new Objeto(a, "Integer");  RESULT=nuevo; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // c3 ::= ID 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  if(parser.booleanWhile != null){ if(parser.booleanWhile){if(parser.condWhile.getDato1()!=null){ parser.condWhile.setDato2(a); } else { parser.condWhile.setDato1(a); } } }   Objeto nuevo = parser.tabla.devolverUnObjeto(a.toString(), parser.listValores); if(nuevo==null){ parser.totalErrores += "La variable "+a.toString()+" no existe dentro del archivo PNT. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; }    RESULT=nuevo;  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // c2 ::= bools NT$35 ext 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (ArrayList<TipoEncadenamiento>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> b = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a != null){ TipoEncadenamiento tipo = new TipoEncadenamiento(null, Boolean.valueOf(a.toString())); b.add(tipo); } RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$35 ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.listCondw.add(parser.condWhile); parser.condWhile = new CondicionWhile(); } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$35",67, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // b8 ::= ID IGUAL FALSE PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		 Object objeto = false; parser.tabla.modificarValor(a.toString(), parser.listValores, "Boolean", objeto, (Integer) aleft, (Integer) aright); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // b8 ::= ID IGUAL TRUE PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		 Object objeto = true; parser.tabla.modificarValor(a.toString(), parser.listValores, "Boolean", objeto, (Integer) aleft, (Integer) aright); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // b8 ::= ID IGUAL COMILLAS ID COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		 parser.tabla.modificarValor(a.toString(), parser.listValores, "String", b, (Integer) aleft, (Integer) aright); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // b8 ::= ID IGUAL b2prima3 PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ Operacion op = new Operacion(a.toString()); op.setMiOperacion(parser.listOp); if(parser.booleanIf!=null){ if(parser.booleanIf){ op.setNoIf(parser.contIfs); } } System.out.println("SE HA AGREGADO LA OPERACION"); parser.ciclo.getListOp().add(op); parser.listOp = new ArrayList<>(); } }  parser.tabla.modificarValor(a.toString(), parser.listValores, "Integer", b, (Integer) aleft, (Integer) aright); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // else1 ::= NT$34 c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("else1",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$34 ::= 
            {
              Object RESULT =null;
 parser.booleanIf = null; if(parser.booleanWhile !=null){ if(parser.booleanWhile == true){ parser.contIfs++; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$34",66, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else1 ::= ELSE LLAVE_A NT$31 c1 NT$32 LLAVE_B NT$33 c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("else1",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
  parser.booleanIf = null; if(parser.booleanWhile != null){ if(parser.booleanWhile == true){ parser.contIfs++; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$33",65, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.verificador != null){ 
            if(parser.entro){ 
                if(!parser.verificador){
                    parser.booleanIf = false; 
                } else { 
                    parser.booleanIf = true; 
                }
            } else { 
                parser.booleanIf = false; 
            } 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$32",64, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$31 ::= 
            {
              Object RESULT =null;
 if(parser.verificador != null){ 
            if(parser.entro){ 
                if(!parser.verificador){ 
                    parser.booleanIf = true; 
                } else { 
                    parser.booleanIf = false; 
                } 
            } 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$31",63, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // c1 ::= error 
            {
              Object RESULT =null;
		  parser.totalErrores += "Mala definicion de instruccion.\n";  parser.todoCorrecto = false; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // c1 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // c1 ::= b8 c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // c1 ::= WHILE PARENTESIS_A NT$27 c2 NT$28 PARENTESIS_B LLAVE_A NT$29 c1 NT$30 LLAVE_B c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.booleanIf != null){ if(parser.booleanIf){   parser.cond.repetirCiclo(a, parser.ciclo, parser.listValores, parser.listPintados, parser.lienzoActual, (Integer) aleft, (Integer) aright); parser.booleanWhile = false; } } else {  parser.cond.repetirCiclo(a, parser.ciclo, parser.listValores, parser.listPintados, parser.lienzoActual, (Integer) aleft, (Integer) aright); parser.booleanWhile = false; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$30",62, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
 System.out.println("VALOR DEL WHILE JUSTO AHORA "+parser.booleanWhile); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$29",61, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.booleanIf != null){ if(parser.booleanIf){ parser.ciclo.setMiCondicional(parser.listCondw);  parser.booleanWhile = null; } } else { parser.ciclo.setMiCondicional(parser.listCondw);  parser.booleanWhile = null; } 
        ArrayList<TipoEncadenamiento> listAux = new ArrayList<>();
        listAux = parser.cond.devolverArreglo(parser.ciclo, parser.tabla, parser.listValores);
        if(parser.booleanIf != null){
            if(parser.booleanIf){
                if(parser.booleanWhile == null){ 
                    parser.entro = true; 
                    if(parser.cond.verificar2(listAux) == null){ 
                        parser.verificador = null; 
                        parser.booleanWhile = null; 
                    } else { 
                        if(!parser.cond.verificar2(listAux)){ 
                            parser.verificador = false; 
                            parser.booleanWhile = false; 
                        } else if(parser.cond.verificar2(listAux)) { 
                            parser.verificador = true; 
                            parser.booleanWhile = true; 
                        } 
                    } 
                } else if(parser.booleanWhile == true){
                    parser.entro = true; 
                    if(parser.cond.verificar2(listAux) == null){ 
                        parser.verificador = null; 
                        parser.booleanWhile = null; 
                    } else { 
                        if(!parser.cond.verificar2(listAux)){ 
                            parser.verificador = false; 
                            parser.booleanWhile = false; 
                        } else { 
                            parser.verificador = true; 
                            parser.booleanWhile = true; 
                        }    
                    } 
                } else { 
                    parser.entro = false;   
                } 
            }    
        } else {
            if(parser.booleanIf){
                if(parser.booleanWhile == null){ 
                    parser.entro = true; 
                    if(parser.cond.verificar2(listAux) == null){ 
                        parser.verificador = null; 
                        parser.booleanWhile = null; 
                    } else { 
                        if(!parser.cond.verificar2(listAux)){ 
                            parser.verificador = false; 
                            parser.booleanWhile = false; 
                        } else if(parser.cond.verificar2(listAux)) { 
                            parser.verificador = true; 
                            parser.booleanWhile = true; 
                        } 
                    } 
                } else if(parser.booleanWhile == true){
                    parser.entro = true; 
                    if(parser.cond.verificar2(listAux) == null){ 
                        parser.verificador = null; 
                        parser.booleanWhile = null; 
                    } else { 
                        if(!parser.cond.verificar2(listAux)){ 
                            parser.verificador = false; 
                            parser.booleanWhile = false; 
                        } else { 
                            parser.verificador = true; 
                            parser.booleanWhile = true; 
                        } 
                    } 
                } else { 
                    parser.entro = false;   
                }

            }
        }    
         
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$28",60, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$27 ::= 
            {
              Object RESULT =null;
parser.booleanWhile = true;
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$27",59, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // c1 ::= IF PARENTESIS_A c2 NT$24 PARENTESIS_B LLAVE_A c1 NT$25 LLAVE_B NT$26 else1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 
        ArrayList<TipoEncadenamiento> listAux = new ArrayList<>();
        for(int i = a.size()-1; i >= 0; i--){
            listAux.add(a.get(i));
        }
        if(parser.booleanIf==null){ 
            if(parser.cond.verificar2(listAux)!= null){
                if(!parser.cond.verificar2(listAux)){
                    parser.booleanIf = false; 
                } else { 
                    parser.booleanIf = true; 
                } 
            }
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$26",58, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

        ArrayList<TipoEncadenamiento> listAux = new ArrayList<>();
        for(int i = a.size()-1; i >= 0; i--){
            listAux.add(a.get(i));
        }
        if(parser.cond.verificar2(listAux) != null){ 
            if(parser.entro){ 
                if(!parser.cond.verificar2(listAux)){
                    parser.booleanIf = false; 
                } else { 
                    parser.booleanIf = true; 
                } 
            } else { 
                parser.booleanIf = false; 
            } 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$25",57, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$24 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 
        ArrayList<TipoEncadenamiento> listAux = new ArrayList<>();
        for(int i = a.size()-1; i >= 0; i--){
            listAux.add(a.get(i));
        }
        
        if(parser.booleanWhile != null){
            if(parser.booleanWhile){ 
                System.out.println("Entro aquii");
                CondicionalIf cond = new CondicionalIf(a, parser.contIfs); 
                parser.ciclo.setCondicional(cond); 
            }
        }
        if( parser.booleanIf == null){ 
            parser.entro = true; 
            if(parser.cond.verificar2(listAux) == null){ 
                parser.verificador = null; 
                parser.booleanIf = false; 
            } else { 
                if(!parser.cond.verificar2(listAux)){ 
                    parser.verificador = false; 
                    parser.booleanIf = false; 
                } else { 
                    parser.verificador = true; 
                    parser.booleanIf = true; 
                } 
            } 
        } else if (parser.booleanIf == true){
            parser.entro = true; 
            if(parser.cond.verificar2(listAux) == null){ 
                parser.verificador = null; 
                parser.booleanIf = false; 
            } else { 
                if(!parser.cond.verificar2(listAux)){ 
                    parser.verificador = false; 
                    parser.booleanIf = false; 
                } else { 
                    parser.verificador = true; 
                    parser.booleanIf = true; 
                } 
            }
        } else { 
            parser.entro = false; 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$24",56, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // c1 ::= PINTAR PARENTESIS_A idColor COMA idImagen COMA posX NT$22 COMA posY PARENTESIS_B PUNTO_COMA NT$23 c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object[] d = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object[] d = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
  if(parser.booleanIf == null || parser.booleanIf){ 
                System.out.println("cumplo "+b.toString()); 
                CuadrosPintar cuadros = new CuadrosPintar(a.toString(), b.toString()); 
                if(parser.nuevaOpX != null){                    
                    cuadros.setOpX(parser.listAux);                 
                } else {     
                    cuadros.setRangoX(c);                       
                }
                if(parser.nuevaOpY != null){
                    cuadros.setOpY(parser.listOp);
                    parser.listOp = new ArrayList<>();
                } else {
                    cuadros.setRangoY(d);
                }
                    parser.nuevaOpX = null;
                    parser.nuevaOpY = null;
                    parser.listAux = new ArrayList<>();
                    parser.pintadas.determinarCasillas(cuadros, parser.listValores, parser.listPintados, parser.tabla, parser.lienzoActual, (Integer) cleft, (Integer) cright);
                    parser.listPintar.add(cuadros); 
                if(parser.booleanWhile != null){
                    if(parser.booleanWhile){
                        cuadros.setEnWhile(true);
                        cuadros.setNoIf(parser.contIfs);    
                        parser.ciclo.getListPorPintar().add(cuadros);
                    }
                }
            } else {  
                parser.listOp = new ArrayList<>();
                parser.nuevaOpX = null;
                parser.nuevaOpY = null;
            }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$23",55, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.nuevaOpX != null){ parser.traspasarDatos(parser.listOp, parser.listAux); } parser.listOp = new ArrayList<>();  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$22",54, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // c ::= INSTRUCCIONES PARENTESIS_A ID NT$21 PARENTESIS_B AGRUPACION_A c1 AGRUPACION_B COMA4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$21 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 parser.lienzoActual = a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // b5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // b5 ::= COMA ID IGUAL FALSE NT$20 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$20 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) {  ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false);  parser.listValores.add(valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // b5 ::= COMA ID IGUAL TRUE NT$19 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$19 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true);  parser.listValores.add(valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // b5 ::= COMA ID NT$18 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$18 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.listValores.add(valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // b4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // b4 ::= COMA ID NT$17 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){  ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida anteriormente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // b4 ::= COMA ID IGUAL COMILLAS ID COMILLAS NT$16 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){  ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // b3 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // b3 ::= COMA ID IGUAL b2prima3 NT$15 b3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ if(b!=null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.todoCorrecto = false; } } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // b2prima2 ::= error b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.totalErrores += "Declaracion de variable incorrecta.\n"; parser.todoCorrecto = false; RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // b2prima2 ::= 
            {
              Integer RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // b2prima2 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  if(parser.booleanIf != null){ if(parser.booleanIf){  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "Integer");  parser.listOp.add(opWhile); } } else { OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "Integer");  parser.listOp.add(opWhile); }  RESULT=(Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // b2prima2 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanIf != null){ if(parser.booleanIf){    OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "String");   parser.listOp.add(opWhile); } } else {  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "String");   parser.listOp.add(opWhile); }   Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(aDevolver == null){ parser.todoCorrecto = false; } RESULT=aDevolver; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // b2prima2 ::= NUMERO DIV b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "Integer");   parser.listOp.add(opWhile);   if(b == null) { parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // b2prima2 ::= ID DIV b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "String");  parser.listOp.add(opWhile);  Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id == null){  parser.todoCorrecto = false; } else { if(b == null){ parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // b2prima2 ::= NUMERO POR b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "Integer");   parser.listOp.add(opWhile);   if(b==null) { parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = (Integer) a * b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // b2prima2 ::= ID POR b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "String");    parser.listOp.add(opWhile);   Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id==null){ parser.todoCorrecto = false; } else { if(b==null) { parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = id * b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // b2prima2 ::= NUMERO MAS b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "Integer");   parser.listOp.add(opWhile);  if(b==null){ parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = (Integer) a + b; RESULT=aDevolver; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // b2prima2 ::= ID MAS b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		   OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "String");  parser.listOp.add(opWhile);   Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id == null) { parser.todoCorrecto = false; } else { if(b == null){ parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = id + b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // b2prima4 ::= error b2prima4 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.totalErrores += "Declaracion de variable incorrecta.\n"; parser.todoCorrecto = false; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // b2prima4 ::= 
            {
              Integer RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // b2prima4 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanIf != null){ if(parser.booleanIf){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, parser.signoActual2, "Integer"); parser.listOp.add(opWhile);  } } else { OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, parser.signoActual2, "Integer"); parser.listOp.add(opWhile); }  RESULT = (Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // b2prima4 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanIf != null){ if(parser.booleanIf){  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, parser.signoActual2, "String"); parser.listOp.add(opWhile);  } } else { OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, parser.signoActual2, "String"); parser.listOp.add(opWhile); }  Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id!= null) { RESULT= id; } else { RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // b2prima4 ::= b2prima4 DIV NT$14 b2prima4 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a!=null && b!=null){ RESULT=a/b; } else { RESULT=null; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$14 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual2 = "DIV"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // b2prima4 ::= b2prima4 POR NT$13 b2prima4 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a!=null && b!=null){ RESULT=a*b; } else { RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual2 = "MULT"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // b2prima4 ::= b2prima4 MENOS NT$12 b2prima4 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a!=null && b!=null){ RESULT= a-b; } else { RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$12 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual2 = "RESTA"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // b2prima4 ::= b2prima4 MAS NT$11 b2prima4 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a!=null && b != null){ RESULT=a+b;  } else { RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima4",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$11 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual2 = "SUMA"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // b2prima3 ::= error b2prima3 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.totalErrores += "Declaracion de variable incorrecta.\n"; parser.todoCorrecto = false; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // b2prima3 ::= 
            {
              Integer RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // b2prima3 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, parser.signoActual, "Integer"); parser.listOp.add(opWhile); } }    RESULT=(Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // b2prima3 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		   if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, parser.signoActual, "String"); parser.listOp.add(opWhile); } }     Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id!= null){ RESULT=id; } else { RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // b2prima3 ::= b2prima3 DIV NT$10 b2prima3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		     if(a!= null && b != null){ RESULT=a/b; } else { RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$10 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual = "DIV"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // b2prima3 ::= b2prima3 POR NT$9 b2prima3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  if(a!=null && b != null){ RESULT=a*b; } else { RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$9 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual = "MULT"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // b2prima3 ::= b2prima3 MENOS NT$8 b2prima3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a!=null && b!=null){ RESULT=a-b; } else {  RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$8 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual = "RESTA"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // b2prima3 ::= b2prima3 MAS NT$7 b2prima3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a!=null && b != null){  RESULT=a + b; } else {  RESULT=null; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$7 ::= 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 parser.signoActual = "SUMA"; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // b2prima1 ::= error b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.totalErrores += "Declaracion de variable incorrecta.\n"; parser.todoCorrecto = false;  RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // b2prima1 ::= 
            {
              Integer RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // b2prima1 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "Integer");  parser.listOp.add(opWhile); } }  RESULT=(Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // b2prima1 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "String");   parser.listOp.add(opWhile); } }  Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(aDevolver == null){ parser.todoCorrecto = false; } RESULT=aDevolver; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // b2prima1 ::= NUMERO DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "Integer");   parser.listOp.add(opWhile);  } }  if(b == null) { parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = (Integer) a / b.intValue(); RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // b2prima1 ::= ID DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "String");  parser.listOp.add(opWhile);  } } Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id == null){ parser.todoCorrecto = false; } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id / b.intValue(); RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // b2prima1 ::= NUMERO POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "Integer");   parser.listOp.add(opWhile);  } }  if(b==null) { parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = (Integer) a * b.intValue(); RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // b2prima1 ::= ID POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "String");    parser.listOp.add(opWhile); } }  Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id==null){ parser.todoCorrecto = false; } else { if(b==null) { RESULT=null; } else { Integer aDevolver = id * b.intValue(); RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // b2prima1 ::= NUMERO MAS b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "Integer");   parser.listOp.add(opWhile);  } } if(b==null){ parser.todoCorrecto = false; RESULT=null; } else { Integer aDevolver = (Integer) a + b.intValue(); RESULT=aDevolver; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // b2prima1 ::= ID MAS b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.signoActual = ""; if(parser.booleanWhile != null){ if(parser.booleanWhile){  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "String");  parser.listOp.add(opWhile);  } }  Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer", (Integer) aleft, (Integer) aright); if(id == null) {  parser.todoCorrecto = false;   } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id + b.intValue(); RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b1 ::= error b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> a = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.totalErrores += "Declaracion de variable incorrecta.\n"; parser.todoCorrecto = false; RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b1 ::= BOOLEAN ID IGUAL FALSE NT$6 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> e = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida anteriormente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b1 ::= BOOLEAN ID IGUAL TRUE NT$5 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> e = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida anteriormente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b1 ::= BOOLEAN ID NT$4 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> e = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida anteriormente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b1 ::= STRING ID NT$3 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> e = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null);  parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b1 ::= STRING ID IGUAL COMILLAS ID COMILLAS NT$2 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> e = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b1 ::= INT ID NT$1 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> e = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida previamente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // b1 ::= INT ID IGUAL b2prima3 NT$0 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<ValoresPNT> e = (ArrayList<ValoresPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){   if(b != null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } else { parser.todoCorrecto = false; } } else { parser.totalErrores += "La variable "+a.toString()+" ya ha sido definida anteriormente. Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // b ::= error 
            {
              Object RESULT =null;
		 parser.todoCorrecto = false; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // b ::= VARS AGRUPACION_A b1 AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // a ::= error 
            {
              Object RESULT =null;
		 parser.todoCorrecto = false; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= b c 
            {
              Object RESULT =null;
		 if(!parser.todoCorrecto) { System.out.println(parser.totalErrores);  InterfazTexto.bandejaErrores += "ERRORES .PNT:\n"; InterfazTexto.bandejaErrores += parser.totalErrores; InterfazTexto.bandejaErrores += "--------------------------------------------------------\n"; parser.totalErrores = ""; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPNT$parser.done_parsing();
          return CUP$SintaxPNT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

