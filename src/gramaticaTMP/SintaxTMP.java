
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 09 13:46:48 CST 2020
//----------------------------------------------------

package gramaticaTMP;

import java_cup.runtime.Symbol;
import pollitos.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 09 13:46:48 CST 2020
  */
public class SintaxTMP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxTMP() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxTMP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxTMP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\010\000\002\004" +
    "\010\000\002\005\010\000\002\005\010\000\002\005\010" +
    "\000\002\010\006\000\002\012\010\000\002\012\006\000" +
    "\002\003\004\000\002\003\002\000\002\006\004\000\002" +
    "\006\002\000\002\007\004\000\002\007\002\000\002\011" +
    "\004\000\002\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\004\021\005\001\002\000\004\002\071\001" +
    "\002\000\004\013\006\001\002\000\004\005\007\001\002" +
    "\000\004\021\010\001\002\000\004\011\012\001\002\000" +
    "\004\022\070\001\002\000\004\005\013\001\002\000\004" +
    "\021\014\001\002\000\010\014\017\015\020\016\015\001" +
    "\002\000\004\005\041\001\002\000\004\022\035\001\002" +
    "\000\004\005\030\001\002\000\004\005\021\001\002\000" +
    "\004\006\022\001\002\000\004\011\023\001\002\000\004" +
    "\006\024\001\002\000\006\004\025\022\ufff5\001\002\000" +
    "\010\014\017\015\020\016\015\001\002\000\004\022\ufffd" +
    "\001\002\000\004\022\ufff6\001\002\000\004\006\031\001" +
    "\002\000\004\011\032\001\002\000\004\006\033\001\002" +
    "\000\006\004\025\022\ufff5\001\002\000\004\022\ufffe\001" +
    "\002\000\006\004\036\022\ufff7\001\002\000\004\011\012" +
    "\001\002\000\004\022\uffff\001\002\000\004\022\ufff8\001" +
    "\002\000\004\007\042\001\002\000\004\021\044\001\002" +
    "\000\004\010\066\001\002\000\006\017\047\020\045\001" +
    "\002\000\004\005\063\001\002\000\004\022\057\001\002" +
    "\000\004\005\050\001\002\000\004\006\051\001\002\000" +
    "\004\011\052\001\002\000\004\006\053\001\002\000\006" +
    "\004\055\022\ufff1\001\002\000\004\022\ufffa\001\002\000" +
    "\006\017\047\020\045\001\002\000\004\022\ufff2\001\002" +
    "\000\006\004\060\010\ufff3\001\002\000\004\021\044\001" +
    "\002\000\004\010\ufffb\001\002\000\004\010\ufff4\001\002" +
    "\000\004\012\064\001\002\000\006\004\055\022\ufff1\001" +
    "\002\000\004\022\ufff9\001\002\000\006\004\025\022\ufff5" +
    "\001\002\000\004\022\ufffc\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\025\001\001\000\004\005\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\033\001\001\000\002\001" +
    "\001\000\004\003\036\001\001\000\004\004\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\042\001\001\000\002\001\001\000\004\012\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\053\001\001\000\002\001\001\000\004\012" +
    "\055\001\001\000\002\001\001\000\004\007\060\001\001" +
    "\000\004\010\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\064\001\001\000\002" +
    "\001\001\000\004\006\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxTMP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxTMP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxTMP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Tiempos> listTiempos;

    public SintaxTMP(AnalizadorLexico4 lex, ArrayList<Tiempos> listTiempos){
        super(lex);
        this.listTiempos = listTiempos;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

    public void traspasarDatosArreglo(ArrayList<Tiempos> listTiempos, ArrayList<Tiempos> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listTiempos.add(listTemporal.get(i));
        }
    }
        
    //seguir con esto ma;ana xd guardar los datos en un arraylist para usarlos en la otra plataforma
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxTMP$actions {
  private final SintaxTMP parser;

  /** Constructor */
  CUP$SintaxTMP$actions(SintaxTMP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxTMP$do_action(
    int                        CUP$SintaxTMP$act_num,
    java_cup.runtime.lr_parser CUP$SintaxTMP$parser,
    java.util.Stack            CUP$SintaxTMP$stack,
    int                        CUP$SintaxTMP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxTMP$result;

      /* select the action based on the action number */
      switch (CUP$SintaxTMP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMA4 ::= 
            {
              ImagenesTiempo RESULT =null;
		 ImagenesTiempo imagen = new ImagenesTiempo(); RESULT=imagen; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA4",7, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMA4 ::= COMA e 
            {
              ImagenesTiempo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ImagenesTiempo a = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA4",7, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMA3 ::= 
            {
              ArrayList<ImagenesTiempo> RESULT =null;
		 ArrayList<ImagenesTiempo> listImagenes = new ArrayList<>(); RESULT=listImagenes; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA3",5, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMA3 ::= COMA d 
            {
              ArrayList<ImagenesTiempo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<ImagenesTiempo> a = (ArrayList<ImagenesTiempo>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA3",5, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMA2 ::= 
            {
              Tiempos RESULT =null;
		 Tiempos tiempo = new Tiempos(); RESULT=tiempo; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA2",4, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMA2 ::= COMA c 
            {
              Tiempos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA2",4, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMA1 ::= 
            {
              ArrayList<Tiempos> RESULT =null;
		 ArrayList<Tiempos> listTiempos = new ArrayList<>(); RESULT=listTiempos; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA1",1, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMA1 ::= COMA b 
            {
              ArrayList<Tiempos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<Tiempos> a = (ArrayList<Tiempos>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA1",1, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // e ::= duracion DOS_PUNTOS NUMERO COMA4 
            {
              ImagenesTiempo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ImagenesTiempo a = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getDuracion() == null){ a.setDuracion((Integer) b); } else { System.out.println("ya existe un duracion en imagenes"); } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // e ::= id DOS_PUNTOS COMILLAS ID COMILLAS COMA4 
            {
              ImagenesTiempo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ImagenesTiempo a = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getId() == null){ a.setId(b.toString()); } else { System.out.println("ya hay un id en imagenes"); } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // d ::= LLAVE_A e LLAVE_B COMA3 
            {
              ArrayList<ImagenesTiempo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		ImagenesTiempo b = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<ImagenesTiempo> a = (ArrayList<ImagenesTiempo>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 a.add(b); RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("d",6, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // c ::= imagenes DOS_PUNTOS AGRUPACION_A d AGRUPACION_B COMA2 
            {
              Tiempos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		ArrayList<ImagenesTiempo> b = (ArrayList<ImagenesTiempo>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getTransiciones() == null) { a.setTransiciones(b); } else { System.out.println("ya hay un transiciones"); } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // c ::= fin DOS_PUNTOS COMILLAS ID COMILLAS COMA2 
            {
              Tiempos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getLienzoFin() == null) { a.setLienzoFin(b.toString()); } else { System.out.println("ya hay un fin"); } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // c ::= inicio DOS_PUNTOS COMILLAS ID COMILLAS COMA2 
            {
              Tiempos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getLienzoInicio() == null) { a.setLienzoInicio(b.toString()); } else { System.out.println("ya hay un inicio"); } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= ID DOS_PUNTOS LLAVE_A c LLAVE_B COMA1 
            {
              ArrayList<Tiempos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<Tiempos> b = (ArrayList<Tiempos>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 a.setNombreLienzo(c.toString()); b.add(a); RESULT=b; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= LLAVE_A TIEMPOS DOS_PUNTOS LLAVE_A b LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).right;
		ArrayList<Tiempos> a = (ArrayList<Tiempos>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).value;
		 parser.traspasarDatosArreglo(parser.listTiempos, a); 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).value;
		RESULT = start_val;
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxTMP$parser.done_parsing();
          return CUP$SintaxTMP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

