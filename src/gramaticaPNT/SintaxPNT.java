
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 07 15:52:46 CST 2020
//----------------------------------------------------

package gramaticaPNT;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 07 15:52:46 CST 2020
  */
public class SintaxPNT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPNT() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\004\011\000\002\004\007\000\002\004\013" +
    "\000\002\004\007\000\002\004\007\000\002\004\011\000" +
    "\002\004\011\000\002\004\002\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\006\005" +
    "\000\002\006\002\000\002\007\011\000\002\007\005\000" +
    "\002\007\002\000\002\010\005\000\002\010\007\000\002" +
    "\010\007\000\002\010\002\000\002\013\012\000\002\014" +
    "\016\000\002\014\012\000\002\014\016\000\002\014\012" +
    "\000\002\014\004\000\002\014\002\000\002\012\006\000" +
    "\002\012\010\000\002\012\006\000\002\012\006\000\002" +
    "\015\006\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\016\003\000\002\016\003\000\002\031\004" +
    "\000\002\031\004\000\002\031\002\000\002\021\003\000" +
    "\002\021\005\000\002\022\003\000\002\022\005\000\002" +
    "\023\003\000\002\023\005\000\002\030\003\000\002\030" +
    "\002\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\033\006\001\002\000\004\041\121\001" +
    "\002\000\004\002\120\001\002\000\004\024\007\001\002" +
    "\000\012\025\ufff7\034\013\035\010\036\012\001\002\000" +
    "\004\047\075\001\002\000\004\025\074\001\002\000\004" +
    "\047\047\001\002\000\004\047\014\001\002\000\010\004" +
    "\015\006\uffee\012\017\001\002\000\006\046\021\047\020" +
    "\001\002\000\004\006\043\001\002\000\006\046\021\047" +
    "\020\001\002\000\020\004\ufff5\006\ufff5\010\ufff5\012\uffd7" +
    "\023\ufff5\026\037\027\040\001\002\000\020\004\ufff6\006" +
    "\ufff6\010\ufff6\012\uffd6\023\ufff6\026\033\027\034\001\002" +
    "\000\006\004\015\006\uffee\001\002\000\004\012\024\001" +
    "\002\000\006\046\026\047\025\001\002\000\016\004\uffd7" +
    "\006\uffd7\010\uffd7\023\uffd7\050\uffd7\051\uffd7\001\002\000" +
    "\034\004\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\023\uffd6\050\uffd6\051" +
    "\uffd6\001\002\000\012\004\ufff0\006\ufff0\010\ufff0\023\ufff0" +
    "\001\002\000\004\006\031\001\002\000\012\025\ufff7\034" +
    "\013\035\010\036\012\001\002\000\004\025\ufffe\001\002" +
    "\000\006\046\021\047\020\001\002\000\006\046\021\047" +
    "\020\001\002\000\012\004\ufff2\006\ufff2\010\ufff2\023\ufff2" +
    "\001\002\000\012\004\ufff4\006\ufff4\010\ufff4\023\ufff4\001" +
    "\002\000\006\046\021\047\020\001\002\000\006\046\021" +
    "\047\020\001\002\000\012\004\ufff1\006\ufff1\010\ufff1\023" +
    "\ufff1\001\002\000\012\004\ufff3\006\ufff3\010\ufff3\023\ufff3" +
    "\001\002\000\012\025\ufff7\034\013\035\010\036\012\001" +
    "\002\000\004\025\ufffd\001\002\000\006\004\015\006\uffee" +
    "\001\002\000\004\006\uffef\001\002\000\010\004\050\006" +
    "\uffe7\012\051\001\002\000\004\047\065\001\002\000\006" +
    "\037\055\040\056\001\002\000\004\006\053\001\002\000" +
    "\012\025\ufff7\034\013\035\010\036\012\001\002\000\004" +
    "\025\ufffa\001\002\000\006\004\050\006\uffe7\001\002\000" +
    "\006\004\050\006\uffe7\001\002\000\004\006\060\001\002" +
    "\000\012\025\ufff7\034\013\035\010\036\012\001\002\000" +
    "\004\025\ufff8\001\002\000\004\006\063\001\002\000\012" +
    "\025\ufff7\034\013\035\010\036\012\001\002\000\004\025" +
    "\ufff9\001\002\000\010\004\050\006\uffe7\012\066\001\002" +
    "\000\006\037\070\040\071\001\002\000\004\006\uffea\001" +
    "\002\000\006\004\050\006\uffe7\001\002\000\006\004\050" +
    "\006\uffe7\001\002\000\004\006\uffe8\001\002\000\004\006" +
    "\uffe9\001\002\000\004\041\uffff\001\002\000\010\004\077" +
    "\006\uffeb\012\100\001\002\000\004\006\116\001\002\000" +
    "\004\047\107\001\002\000\004\007\101\001\002\000\004" +
    "\047\102\001\002\000\004\007\103\001\002\000\006\004" +
    "\077\006\uffeb\001\002\000\004\006\105\001\002\000\012" +
    "\025\ufff7\034\013\035\010\036\012\001\002\000\004\025" +
    "\ufffc\001\002\000\010\004\077\006\uffeb\012\111\001\002" +
    "\000\004\006\uffec\001\002\000\004\007\112\001\002\000" +
    "\004\047\113\001\002\000\004\007\114\001\002\000\006" +
    "\004\077\006\uffeb\001\002\000\004\006\uffed\001\002\000" +
    "\012\025\ufff7\034\013\035\010\036\012\001\002\000\004" +
    "\025\ufffb\001\002\000\004\002\001\001\002\000\004\022" +
    "\123\001\002\000\004\002\000\001\002\000\004\047\124" +
    "\001\002\000\004\023\125\001\002\000\004\024\126\001" +
    "\002\000\014\025\uffe0\042\130\043\134\045\133\047\127" +
    "\001\002\000\004\012\237\001\002\000\004\022\211\001" +
    "\002\000\004\025\206\001\002\000\016\021\uffe0\025\uffe0" +
    "\042\130\043\134\045\133\047\127\001\002\000\004\022" +
    "\176\001\002\000\004\022\135\001\002\000\012\037\140" +
    "\040\142\046\026\047\136\001\002\000\026\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd3" +
    "\050\143\051\145\001\002\000\020\011\163\012\165\013" +
    "\166\014\167\015\171\016\172\017\170\001\002\000\010" +
    "\023\uffd3\050\143\051\145\001\002\000\004\023\150\001" +
    "\002\000\010\023\uffd3\050\143\051\145\001\002\000\012" +
    "\037\140\040\142\046\026\047\136\001\002\000\004\023" +
    "\uffd8\001\002\000\012\037\140\040\142\046\026\047\136" +
    "\001\002\000\004\023\uffd4\001\002\000\004\023\uffd5\001" +
    "\002\000\004\020\151\001\002\000\014\021\uffe0\042\130" +
    "\043\134\045\133\047\127\001\002\000\004\021\153\001" +
    "\002\000\020\021\uffe0\025\uffe0\042\130\043\134\044\154" +
    "\045\133\047\127\001\002\000\004\020\156\001\002\000" +
    "\006\021\uffe4\025\uffe4\001\002\000\014\021\uffe0\042\130" +
    "\043\134\045\133\047\127\001\002\000\004\021\160\001" +
    "\002\000\016\021\uffe0\025\uffe0\042\130\043\134\045\133" +
    "\047\127\001\002\000\006\021\uffe3\025\uffe3\001\002\000" +
    "\004\023\uffd9\001\002\000\006\046\uffca\047\uffca\001\002" +
    "\000\006\046\026\047\025\001\002\000\006\046\uffc9\047" +
    "\uffc9\001\002\000\006\046\uffc8\047\uffc8\001\002\000\006" +
    "\046\uffc7\047\uffc7\001\002\000\006\046\uffc4\047\uffc4\001" +
    "\002\000\006\046\uffc6\047\uffc6\001\002\000\006\046\uffc5" +
    "\047\uffc5\001\002\000\010\023\uffd3\050\143\051\145\001" +
    "\002\000\004\023\uffdb\001\002\000\004\023\uffda\001\002" +
    "\000\012\037\140\040\142\046\026\047\136\001\002\000" +
    "\004\023\200\001\002\000\004\020\201\001\002\000\014" +
    "\021\uffe0\042\130\043\134\045\133\047\127\001\002\000" +
    "\004\021\203\001\002\000\016\021\uffe0\025\uffe0\042\130" +
    "\043\134\045\133\047\127\001\002\000\006\021\uffe2\025" +
    "\uffe2\001\002\000\006\021\uffe1\025\uffe1\001\002\000\006" +
    "\002\uffcb\041\121\001\002\000\004\002\uffe6\001\002\000" +
    "\004\002\uffcc\001\002\000\006\007\214\047\212\001\002" +
    "\000\004\004\uffd2\001\002\000\004\004\217\001\002\000" +
    "\004\047\215\001\002\000\004\007\216\001\002\000\004" +
    "\004\uffd1\001\002\000\006\007\222\047\220\001\002\000" +
    "\004\004\uffd0\001\002\000\004\004\225\001\002\000\004" +
    "\047\223\001\002\000\004\007\224\001\002\000\004\004" +
    "\uffcf\001\002\000\006\046\021\047\020\001\002\000\010" +
    "\004\uffce\010\235\023\uffce\001\002\000\004\004\230\001" +
    "\002\000\006\046\021\047\020\001\002\000\004\023\232" +
    "\001\002\000\004\006\233\001\002\000\016\021\uffe0\025" +
    "\uffe0\042\130\043\134\045\133\047\127\001\002\000\006" +
    "\021\uffe5\025\uffe5\001\002\000\006\046\021\047\020\001" +
    "\002\000\006\004\uffcd\023\uffcd\001\002\000\014\007\243" +
    "\037\241\040\242\046\021\047\020\001\002\000\004\006" +
    "\251\001\002\000\004\006\250\001\002\000\004\006\247" +
    "\001\002\000\004\047\244\001\002\000\004\007\245\001" +
    "\002\000\004\006\246\001\002\000\016\021\uffde\025\uffde" +
    "\042\uffde\043\uffde\045\uffde\047\uffde\001\002\000\016\021" +
    "\uffdc\025\uffdc\042\uffdc\043\uffdc\045\uffdc\047\uffdc\001\002" +
    "\000\016\021\uffdd\025\uffdd\042\uffdd\043\uffdd\045\uffdd\047" +
    "\uffdd\001\002\000\016\021\uffdf\025\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\047\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\006\002\004\003\003\001\001\000\004\013" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\015\001\001" +
    "\000\006\005\044\016\022\001\001\000\002\001\001\000" +
    "\006\005\021\016\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\027\001\001\000\002\001\001\000" +
    "\004\016\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\031\001" +
    "\001\000\002\001\001\000\006\005\035\016\022\001\001" +
    "\000\006\005\034\016\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\041\016\022\001\001\000\006" +
    "\005\040\016\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\043\001\001\000\002\001\001\000\004" +
    "\006\045\001\001\000\002\001\001\000\004\010\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\053\001\001\000\002\001\001\000\004\010" +
    "\061\001\001\000\004\010\056\001\001\000\002\001\001" +
    "\000\004\004\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\063\001\001\000\002\001\001\000\004" +
    "\010\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\072\001\001\000\004\010\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\103\001\001\000\002\001\001\000\004\004\105\001\001" +
    "\000\002\001\001\000\004\007\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\114\001\001\000\002\001\001\000\004\004" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\131\014\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\131\014\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\140\016\136\001\001\000\004\031" +
    "\174\001\001\000\004\032\163\001\001\000\004\031\161" +
    "\001\001\000\002\001\001\000\004\031\143\001\001\000" +
    "\006\015\146\016\136\001\001\000\002\001\001\000\006" +
    "\015\145\016\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\131\014\151\001\001" +
    "\000\002\001\001\000\006\012\131\014\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\131\014\156" +
    "\001\001\000\002\001\001\000\006\012\131\014\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\176\016\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\131\014" +
    "\201\001\001\000\002\001\001\000\006\012\131\014\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\207\030\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\225\016\022\023\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\225\016\022\023\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\131\014\233\001\001\000\002\001\001\000\006\005\235" +
    "\016\022\001\001\000\002\001\001\000\006\005\237\016" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPNT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPNT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPNT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public SintaxPNT(AnalizadorLexico3 lex){
        super(lex);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPNT$actions {
  private final SintaxPNT parser;

  /** Constructor */
  CUP$SintaxPNT$actions(SintaxPNT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPNT$do_action(
    int                        CUP$SintaxPNT$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPNT$parser,
    java.util.Stack            CUP$SintaxPNT$stack,
    int                        CUP$SintaxPNT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPNT$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPNT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relacional ::= DIFERENCIA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relacional ::= DOBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMA4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMA4 ::= c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // posX ::= b2 RANGO b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",17, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // posX ::= b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",17, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // idImagen ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // idImagen ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // idColor ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // idColor ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ext ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ext ::= OR c2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ext ::= AND c2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c3 ::= NUMERO 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",12, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // c3 ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",12, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c2 ::= FALSE ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",11, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c2 ::= TRUE ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",11, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c2 ::= ID ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",11, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // c2 ::= c3 relacional c3 ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",11, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // b8 ::= ID IGUAL FALSE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // b8 ::= ID IGUAL TRUE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // b8 ::= ID IGUAL COMILLAS ID COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // b8 ::= ID IGUAL b2 PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // c1 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",10, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // c1 ::= b8 c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",10, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // c1 ::= WHILE PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",10, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // c1 ::= IF PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B ELSE LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",10, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // c1 ::= IF PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",10, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // c1 ::= PINTAR PARENTESIS_A idColor COMA idImagen COMA posX COMA posX PARENTESIS_B PUNTO_COMA c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",10, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // c ::= INSTRUCCIONES PARENTESIS_A ID PARENTESIS_B AGRUPACION_A c1 AGRUPACION_B COMA4 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c",9, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // b5 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // b5 ::= COMA ID IGUAL FALSE b5 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // b5 ::= COMA ID IGUAL TRUE b5 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // b5 ::= COMA ID b5 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // b4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // b4 ::= COMA ID b4 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b4 ::= COMA ID IGUAL COMILLAS ID COMILLAS b4 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b3 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",4, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b3 ::= COMA b2 b3 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",4, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b2 ::= c3 IGUAL c3 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b2 ::= ID MENOS b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b2 ::= NUMERO MENOS b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b2 ::= ID MAS b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b2 ::= NUMERO MAS b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b2 ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b2 ::= NUMERO 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b1 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // b1 ::= BOOLEAN ID IGUAL FALSE b5 PUNTO_COMA b1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b1 ::= BOOLEAN ID IGUAL TRUE b5 PUNTO_COMA b1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // b1 ::= BOOLEAN ID b5 PUNTO_COMA b1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // b1 ::= STRING ID b4 PUNTO_COMA b1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // b1 ::= STRING ID IGUAL COMILLAS ID COMILLAS b4 PUNTO_COMA b1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // b1 ::= INT ID b3 PUNTO_COMA b1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // b1 ::= INT ID IGUAL b2 b3 PUNTO_COMA b1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= VARS AGRUPACION_A b1 AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= b c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPNT$parser.done_parsing();
          return CUP$SintaxPNT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

