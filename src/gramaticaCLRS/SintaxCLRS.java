
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 08 23:12:47 CST 2020
//----------------------------------------------------

package gramaticaCLRS;

import pollitos.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 08 23:12:47 CST 2020
  */
public class SintaxCLRS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxCLRS() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxCLRS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxCLRS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\011\000\002\006" +
    "\010\000\002\006\004\000\002\011\010\000\002\011\010" +
    "\000\002\011\004\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\004\000\002\005\005\000\002" +
    "\005\004\000\002\007\004\000\002\007\002\000\002\010" +
    "\004\000\002\010\002\000\002\004\004\000\002\004\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\011\005\001\002\000\004\002\070\001" +
    "\002\000\004\004\006\001\002\000\004\013\007\001\002" +
    "\000\004\011\010\001\002\000\006\003\013\015\012\001" +
    "\002\000\004\012\066\001\002\000\004\013\015\001\002" +
    "\000\006\003\013\015\012\001\002\000\004\012\ufffe\001" +
    "\002\000\004\011\016\001\002\000\006\003\020\015\017" +
    "\001\002\000\004\013\027\001\002\000\006\003\020\015" +
    "\017\001\002\000\004\012\022\001\002\000\006\012\ufff3" +
    "\017\023\001\002\000\006\003\013\015\012\001\002\000" +
    "\004\012\uffff\001\002\000\004\012\ufff4\001\002\000\004" +
    "\012\ufffb\001\002\000\004\011\030\001\002\000\014\003" +
    "\033\005\031\006\034\007\036\010\032\001\002\000\004" +
    "\013\063\001\002\000\004\013\061\001\002\000\014\003" +
    "\033\005\031\006\034\007\036\010\032\001\002\000\004" +
    "\013\055\001\002\000\004\012\053\001\002\000\004\013" +
    "\044\001\002\000\004\012\040\001\002\000\006\012\ufff1" +
    "\017\041\001\002\000\006\003\020\015\017\001\002\000" +
    "\004\012\ufffd\001\002\000\004\012\ufff2\001\002\000\004" +
    "\014\045\001\002\000\006\012\uffef\017\046\001\002\000" +
    "\012\003\050\005\031\006\034\007\036\001\002\000\004" +
    "\012\ufff9\001\002\000\012\003\050\005\031\006\034\007" +
    "\036\001\002\000\004\012\ufff0\001\002\000\004\012\ufff7" +
    "\001\002\000\006\012\ufff1\017\041\001\002\000\004\012" +
    "\ufffc\001\002\000\004\014\056\001\002\000\006\012\uffef" +
    "\017\046\001\002\000\004\012\ufffa\001\002\000\004\012" +
    "\ufff5\001\002\000\004\016\062\001\002\000\004\012\ufff6" +
    "\001\002\000\004\014\064\001\002\000\006\012\uffef\017" +
    "\046\001\002\000\004\012\ufff8\001\002\000\004\012\067" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\020\001\001\000\002\001\001\000\004\011" +
    "\025\001\001\000\002\001\001\000\004\007\023\001\001" +
    "\000\004\006\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\036" +
    "\005\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\051\005\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\041\001\001\000\004\011\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\046\001" +
    "\001\000\004\003\050\001\001\000\002\001\001\000\004" +
    "\003\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxCLRS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxCLRS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxCLRS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public ArrayList<Colores> listColores;

    public SintaxCLRS(AnalizadorLexico lex, ArrayList<Colores> listColores){
        super(lex);
        this.listColores = listColores;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

    public void traspasarDatosArreglo(ArrayList<Colores> listColores, ArrayList<Colores> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listColores.add(listTemporal.get(i));
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxCLRS$actions {
  private final SintaxCLRS parser;

  /** Constructor */
  CUP$SintaxCLRS$actions(SintaxCLRS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxCLRS$do_action(
    int                        CUP$SintaxCLRS$act_num,
    java_cup.runtime.lr_parser CUP$SintaxCLRS$parser,
    java.util.Stack            CUP$SintaxCLRS$stack,
    int                        CUP$SintaxCLRS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxCLRS$result;

      /* select the action based on the action number */
      switch (CUP$SintaxCLRS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMA3 ::= 
            {
              LienzoColor RESULT =null;
		 LienzoColor colores = new LienzoColor(); RESULT=colores; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("COMA3",2, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMA3 ::= COMA d 
            {
              LienzoColor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		LienzoColor a = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("COMA3",2, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMA2 ::= 
            {
              ArrayList<LienzoColor> RESULT =null;
		 ArrayList<LienzoColor> listColores = new ArrayList<>(); RESULT=listColores; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("COMA2",6, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMA2 ::= COMA c 
            {
              ArrayList<LienzoColor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		ArrayList<LienzoColor> e = (ArrayList<LienzoColor>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("COMA2",6, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMA1 ::= 
            {
              ArrayList<Colores> RESULT =null;
		 ArrayList<Colores> coloresLienzos = new ArrayList<>(); RESULT=coloresLienzos; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("COMA1",5, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMA1 ::= COMA b 
            {
              ArrayList<Colores> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		ArrayList<Colores> e = (ArrayList<Colores>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 RESULT=e; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("COMA1",5, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // e ::= error e 
            {
              LienzoColor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		LienzoColor e = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 System.out.println("error"); RESULT=e; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // e ::= HEX DOS_PUNTOS codigoHex 
            {
              LienzoColor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 LienzoColor colores = new LienzoColor(); colores.setColorHex(e.toString()); RESULT=colores; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("e",3, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // d ::= error d 
            {
              LienzoColor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		LienzoColor e = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 System.out.println("error prro"); RESULT=e; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("d",1, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // d ::= Green DOS_PUNTOS NUMERO COMA3 
            {
              LienzoColor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		LienzoColor b = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 if(b.getVerde()==null){ b.setVerde((Integer) e); } else { System.out.println("ya hay un dato en verde"); } RESULT=b;  
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("d",1, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // d ::= Blue DOS_PUNTOS NUMERO COMA3 
            {
              LienzoColor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		LienzoColor b = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 if(b.getAzul()==null){ b.setAzul((Integer) e); } else { System.out.println("ya hay un dato azul"); } RESULT=b; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("d",1, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // d ::= Red DOS_PUNTOS NUMERO COMA3 
            {
              LienzoColor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		LienzoColor b = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 if(b.getRojo()==null){ b.setRojo((Integer) e); } else { System.out.println("ya hay un dato rojo"); } RESULT=b; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("d",1, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // c ::= error c 
            {
              ArrayList<LienzoColor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		ArrayList<LienzoColor> e = (ArrayList<LienzoColor>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		  
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // c ::= ID DOS_PUNTOS LLAVE_A e LLAVE_B COMA2 
            {
              ArrayList<LienzoColor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).right;
		LienzoColor a = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		ArrayList<LienzoColor> b = (ArrayList<LienzoColor>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 if(a.getColorHex()==null){ System.out.println("Falta archivo hex en color"); } else { a.setIdColor(e.toString()); b.add(a); } RESULT=b; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // c ::= ID DOS_PUNTOS LLAVE_A d LLAVE_B COMA2 
            {
              ArrayList<LienzoColor> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).right;
		LienzoColor a = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		ArrayList<LienzoColor> b = (ArrayList<LienzoColor>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		  if(a.getRojo()==null || a.getAzul() == null || a.getVerde()==null){ System.out.println("falta de un atributo color"); } else { a.setIdColor(e.toString()); b.add(a); } RESULT=b; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("c",7, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // b ::= error b 
            {
              ArrayList<Colores> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		ArrayList<Colores> e = (ArrayList<Colores>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("b",4, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= ID DOS_PUNTOS LLAVE_A c LLAVE_B COMA1 
            {
              ArrayList<Colores> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).right;
		ArrayList<LienzoColor> a = (ArrayList<LienzoColor>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()).right;
		ArrayList<Colores> c = (ArrayList<Colores>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.peek()).value;
		  Colores color = new Colores(); color.setNombreLienzo(e.toString()); color.setListColores(a); c.add(color); RESULT=c; 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("b",4, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= LLAVE_A COLORES DOS_PUNTOS LLAVE_A b LLAVE_B LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).right;
		ArrayList<Colores> a = (ArrayList<Colores>)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-2)).value;
		 parser.traspasarDatosArreglo(parser.listColores, a); 
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          return CUP$SintaxCLRS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)).value;
		RESULT = start_val;
              CUP$SintaxCLRS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.elementAt(CUP$SintaxCLRS$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCLRS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxCLRS$parser.done_parsing();
          return CUP$SintaxCLRS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

