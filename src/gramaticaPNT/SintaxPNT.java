
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 18 17:18:56 CST 2020
//----------------------------------------------------

package gramaticaPNT;

import java_cup.runtime.Symbol;
import pollitos.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 18 17:18:56 CST 2020
  */
public class SintaxPNT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPNT() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\036\002\000\002\030\012\000\002\037\002" +
    "\000\002\030\010\000\002\040\002\000\002\030\014\000" +
    "\002\041\002\000\002\030\010\000\002\042\002\000\002" +
    "\030\010\000\002\043\002\000\002\030\012\000\002\044" +
    "\002\000\002\030\012\000\002\030\002\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\003\000\002" +
    "\034\003\000\002\034\002\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\045\002\000" +
    "\002\004\010\000\002\004\002\000\002\046\002\000\002" +
    "\005\012\000\002\047\002\000\002\005\006\000\002\005" +
    "\002\000\002\050\002\000\002\031\006\000\002\051\002" +
    "\000\002\031\010\000\002\052\002\000\002\031\010\000" +
    "\002\031\002\000\002\010\012\000\002\011\016\000\002" +
    "\011\012\000\002\011\016\000\002\011\012\000\002\011" +
    "\004\000\002\011\002\000\002\007\006\000\002\007\010" +
    "\000\002\007\006\000\002\007\006\000\002\013\006\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\012\003\000\002\012\003\000\002\026\004\000\002\026" +
    "\004\000\002\026\002\000\002\016\003\000\002\016\005" +
    "\000\002\017\003\000\002\017\005\000\002\020\003\000" +
    "\002\020\005\000\002\025\003\000\002\025\002\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\033\006\001\002\000\004\041\137\001" +
    "\002\000\004\002\136\001\002\000\004\024\007\001\002" +
    "\000\012\025\ufff0\034\013\035\010\036\012\001\002\000" +
    "\004\047\107\001\002\000\004\025\106\001\002\000\004" +
    "\047\053\001\002\000\004\047\014\001\002\000\010\004" +
    "\ufffc\006\ufffc\012\016\001\002\000\006\004\023\006\uffdd" +
    "\001\002\000\012\004\uffe7\006\uffe7\046\017\047\020\001" +
    "\002\000\014\004\uffe8\006\uffe8\026\042\030\044\052\043" +
    "\001\002\000\014\004\uffe9\006\uffe9\026\034\030\036\052" +
    "\035\001\002\000\006\004\ufffe\006\ufffe\001\002\000\006" +
    "\004\023\006\uffdd\001\002\000\004\047\027\001\002\000" +
    "\004\006\025\001\002\000\012\025\ufff0\034\013\035\010" +
    "\036\012\001\002\000\004\025\ufffd\001\002\000\004\012" +
    "\030\001\002\000\012\004\uffe7\006\uffe7\046\017\047\020" +
    "\001\002\000\006\004\uffdf\006\uffdf\001\002\000\006\004" +
    "\023\006\uffdd\001\002\000\004\006\uffde\001\002\000\012" +
    "\004\uffe7\006\uffe7\046\017\047\020\001\002\000\012\004" +
    "\uffe7\006\uffe7\046\017\047\020\001\002\000\012\004\uffe7" +
    "\006\uffe7\046\017\047\020\001\002\000\006\004\uffed\006" +
    "\uffed\001\002\000\006\004\uffeb\006\uffeb\001\002\000\006" +
    "\004\uffef\006\uffef\001\002\000\012\004\uffe7\006\uffe7\046" +
    "\017\047\020\001\002\000\012\004\uffe7\006\uffe7\046\017" +
    "\047\020\001\002\000\012\004\uffe7\006\uffe7\046\017\047" +
    "\020\001\002\000\006\004\uffec\006\uffec\001\002\000\006" +
    "\004\uffea\006\uffea\001\002\000\006\004\uffee\006\uffee\001" +
    "\002\000\004\006\051\001\002\000\012\025\ufff0\034\013" +
    "\035\010\036\012\001\002\000\004\025\ufffb\001\002\000" +
    "\010\004\ufff6\006\ufff6\012\054\001\002\000\006\037\074" +
    "\040\075\001\002\000\006\004\056\006\uffd1\001\002\000" +
    "\004\047\062\001\002\000\004\006\060\001\002\000\012" +
    "\025\ufff0\034\013\035\010\036\012\001\002\000\004\025" +
    "\ufff5\001\002\000\010\004\uffd7\006\uffd7\012\064\001\002" +
    "\000\006\004\056\006\uffd1\001\002\000\006\037\065\040" +
    "\066\001\002\000\006\004\uffd5\006\uffd5\001\002\000\006" +
    "\004\uffd3\006\uffd3\001\002\000\006\004\056\006\uffd1\001" +
    "\002\000\004\006\uffd2\001\002\000\006\004\056\006\uffd1" +
    "\001\002\000\004\006\uffd4\001\002\000\004\006\uffd6\001" +
    "\002\000\006\004\ufff4\006\ufff4\001\002\000\006\004\ufff2" +
    "\006\ufff2\001\002\000\006\004\056\006\uffd1\001\002\000" +
    "\004\006\100\001\002\000\012\025\ufff0\034\013\035\010" +
    "\036\012\001\002\000\004\025\ufff1\001\002\000\006\004" +
    "\056\006\uffd1\001\002\000\004\006\104\001\002\000\012" +
    "\025\ufff0\034\013\035\010\036\012\001\002\000\004\025" +
    "\ufff3\001\002\000\004\041\uffff\001\002\000\010\004\ufff8" +
    "\006\ufff8\012\111\001\002\000\006\004\117\006\uffd8\001" +
    "\002\000\004\007\112\001\002\000\004\047\113\001\002" +
    "\000\004\007\114\001\002\000\006\004\ufffa\006\ufffa\001" +
    "\002\000\006\004\117\006\uffd8\001\002\000\004\006\131" +
    "\001\002\000\004\047\120\001\002\000\010\004\uffda\006" +
    "\uffda\012\121\001\002\000\004\007\124\001\002\000\006" +
    "\004\117\006\uffd8\001\002\000\004\006\uffd9\001\002\000" +
    "\004\047\125\001\002\000\004\007\126\001\002\000\006" +
    "\004\uffdc\006\uffdc\001\002\000\006\004\117\006\uffd8\001" +
    "\002\000\004\006\uffdb\001\002\000\012\025\ufff0\034\013" +
    "\035\010\036\012\001\002\000\004\025\ufff9\001\002\000" +
    "\004\006\134\001\002\000\012\025\ufff0\034\013\035\010" +
    "\036\012\001\002\000\004\025\ufff7\001\002\000\004\002" +
    "\001\001\002\000\004\022\141\001\002\000\004\002\000" +
    "\001\002\000\004\047\142\001\002\000\004\023\143\001" +
    "\002\000\004\024\144\001\002\000\014\025\uffca\042\146" +
    "\043\152\045\151\047\145\001\002\000\004\012\257\001" +
    "\002\000\004\022\231\001\002\000\004\025\226\001\002" +
    "\000\016\021\uffca\025\uffca\042\146\043\152\045\151\047" +
    "\145\001\002\000\004\022\216\001\002\000\004\022\153" +
    "\001\002\000\012\037\157\040\161\046\155\047\154\001" +
    "\002\000\026\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\023\uffbd\050\162\051\164\001\002\000" +
    "\026\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\023\uffc0\050\uffc0\051\uffc0\001\002\000\020\011" +
    "\202\012\204\013\205\014\206\015\210\016\211\017\207" +
    "\001\002\000\010\023\uffbd\050\162\051\164\001\002\000" +
    "\004\023\167\001\002\000\010\023\uffbd\050\162\051\164" +
    "\001\002\000\012\037\157\040\161\046\155\047\154\001" +
    "\002\000\004\023\uffc2\001\002\000\012\037\157\040\161" +
    "\046\155\047\154\001\002\000\004\023\uffbe\001\002\000" +
    "\004\023\uffbf\001\002\000\004\020\170\001\002\000\014" +
    "\021\uffca\042\146\043\152\045\151\047\145\001\002\000" +
    "\004\021\172\001\002\000\020\021\uffca\025\uffca\042\146" +
    "\043\152\044\173\045\151\047\145\001\002\000\004\020" +
    "\175\001\002\000\006\021\uffce\025\uffce\001\002\000\014" +
    "\021\uffca\042\146\043\152\045\151\047\145\001\002\000" +
    "\004\021\177\001\002\000\016\021\uffca\025\uffca\042\146" +
    "\043\152\045\151\047\145\001\002\000\006\021\uffcd\025" +
    "\uffcd\001\002\000\004\023\uffc3\001\002\000\006\046\uffb4" +
    "\047\uffb4\001\002\000\006\046\155\047\212\001\002\000" +
    "\006\046\uffb3\047\uffb3\001\002\000\006\046\uffb2\047\uffb2" +
    "\001\002\000\006\046\uffb1\047\uffb1\001\002\000\006\046" +
    "\uffae\047\uffae\001\002\000\006\046\uffb0\047\uffb0\001\002" +
    "\000\006\046\uffaf\047\uffaf\001\002\000\010\023\uffc1\050" +
    "\uffc1\051\uffc1\001\002\000\010\023\uffbd\050\162\051\164" +
    "\001\002\000\004\023\uffc5\001\002\000\004\023\uffc4\001" +
    "\002\000\012\037\157\040\161\046\155\047\154\001\002" +
    "\000\004\023\220\001\002\000\004\020\221\001\002\000" +
    "\014\021\uffca\042\146\043\152\045\151\047\145\001\002" +
    "\000\004\021\223\001\002\000\016\021\uffca\025\uffca\042" +
    "\146\043\152\045\151\047\145\001\002\000\006\021\uffcc" +
    "\025\uffcc\001\002\000\006\021\uffcb\025\uffcb\001\002\000" +
    "\006\002\uffb5\041\137\001\002\000\004\002\uffd0\001\002" +
    "\000\004\002\uffb6\001\002\000\006\007\234\047\232\001" +
    "\002\000\004\004\uffbc\001\002\000\004\004\237\001\002" +
    "\000\004\047\235\001\002\000\004\007\236\001\002\000" +
    "\004\004\uffbb\001\002\000\006\007\242\047\240\001\002" +
    "\000\004\004\uffba\001\002\000\004\004\245\001\002\000" +
    "\004\047\243\001\002\000\004\007\244\001\002\000\004" +
    "\004\uffb9\001\002\000\002\001\002\000\010\004\uffb8\010" +
    "\255\023\uffb8\001\002\000\004\004\250\001\002\000\002" +
    "\001\002\000\004\023\252\001\002\000\004\006\253\001" +
    "\002\000\016\021\uffca\025\uffca\042\146\043\152\045\151" +
    "\047\145\001\002\000\006\021\uffcf\025\uffcf\001\002\000" +
    "\002\001\002\000\006\004\uffb7\023\uffb7\001\002\000\010" +
    "\007\263\037\261\040\262\001\002\000\004\006\271\001" +
    "\002\000\004\006\270\001\002\000\004\006\267\001\002" +
    "\000\004\047\264\001\002\000\004\007\265\001\002\000" +
    "\004\006\266\001\002\000\016\021\uffc8\025\uffc8\042\uffc8" +
    "\043\uffc8\045\uffc8\047\uffc8\001\002\000\016\021\uffc6\025" +
    "\uffc6\042\uffc6\043\uffc6\045\uffc6\047\uffc6\001\002\000\016" +
    "\021\uffc7\025\uffc7\042\uffc7\043\uffc7\045\uffc7\047\uffc7\001" +
    "\002\000\016\021\uffc9\025\uffc9\042\uffc9\043\uffc9\045\uffc9" +
    "\047\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\002\004\003\003\001\001\000\004\010" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\014\001\001" +
    "\000\004\004\047\001\001\000\004\034\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\021\001\001" +
    "\000\004\004\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\030\001\001\000\004\045\031\001" +
    "\001\000\004\004\032\001\001\000\002\001\001\000\004" +
    "\034\040\001\001\000\004\034\037\001\001\000\004\034" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\046\001\001\000\004\034\045\001" +
    "\001\000\004\034\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\051\001\001\000\002\001\001\000\004\042\054\001\001" +
    "\000\002\001\001\000\004\031\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\060\001\001\000\002" +
    "\001\001\000\004\050\062\001\001\000\004\031\072\001" +
    "\001\000\002\001\001\000\004\051\070\001\001\000\004" +
    "\052\066\001\001\000\004\031\067\001\001\000\002\001" +
    "\001\000\004\031\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\101\001\001\000\004\044\075\001" +
    "\001\000\004\031\076\001\001\000\002\001\001\000\004" +
    "\030\100\001\001\000\002\001\001\000\004\031\102\001" +
    "\001\000\002\001\001\000\004\030\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\107\001\001\000" +
    "\004\005\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\114\001\001\000\004\005" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\121\001\001\000\002\001\001\000\004\005\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\126\001\001\000\004\005\127\001\001\000" +
    "\002\001\001\000\004\030\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\147\011\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\147\011\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\155" +
    "\013\157\001\001\000\004\026\214\001\001\000\002\001" +
    "\001\000\004\027\202\001\001\000\004\026\200\001\001" +
    "\000\002\001\001\000\004\026\162\001\001\000\006\012" +
    "\155\013\165\001\001\000\002\001\001\000\006\012\155" +
    "\013\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\147\011\170\001\001\000\002" +
    "\001\001\000\006\007\147\011\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\147\011\175\001\001" +
    "\000\002\001\001\000\006\007\147\011\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\155\013\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\147\011\221\001\001\000\002\001\001\000\006\007\147" +
    "\011\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\227\025\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\246\032\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\250\032\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\147\011" +
    "\253\001\001\000\002\001\001\000\004\032\255\001\001" +
    "\000\002\001\001\000\004\032\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPNT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPNT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPNT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public ArrayList<ValoresPNT> listValores;
    public ArrayList<Lienzos> listLienzos;
    public ArrayList<Colores> listColores;
    public ArrayList<Tiempos> listTiempos;
    public ArrayList<CuadrosPintar> listPintar;
    public TablaSimbolos tabla;
    public boolean esNegativo = false;

    public SintaxPNT(AnalizadorLexico3 lex, ArrayList<ValoresPNT> listValores, TablaSimbolos tabla, ArrayList<Lienzos> listLienzos, ArrayList<Colores> listColores, ArrayList<Tiempos> listTiempos, ArrayList<CuadrosPintar> listPintar){
        super(lex);
        this.listValores = listValores;
        this.tabla = tabla;
        this.listLienzos = listLienzos;
        this.listColores = listColores;
        this.listTiempos = listTiempos;
        this.listPintar = listPintar;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPNT$actions {
  private final SintaxPNT parser;

  /** Constructor */
  CUP$SintaxPNT$actions(SintaxPNT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPNT$do_action(
    int                        CUP$SintaxPNT$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPNT$parser,
    java.util.Stack            CUP$SintaxPNT$stack,
    int                        CUP$SintaxPNT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPNT$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPNT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relacional ::= DIFERENCIA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // relacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // relacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // relacional ::= DOBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COMA4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COMA4 ::= c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // posX ::= b2 RANGO b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // posX ::= b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // idImagen ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // idImagen ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // idColor ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",12, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // idColor ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",12, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ext ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ext ::= OR c2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ext ::= AND c2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c3 ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c3 ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c2 ::= FALSE ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",9, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c2 ::= TRUE ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",9, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // c2 ::= ID ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",9, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // c2 ::= c3 relacional c3 ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",9, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // b8 ::= ID IGUAL FALSE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // b8 ::= ID IGUAL TRUE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // b8 ::= ID IGUAL COMILLAS ID COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // b8 ::= ID IGUAL b2 PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c1 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // c1 ::= b8 c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // c1 ::= WHILE PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c1 ::= IF PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B ELSE LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c1 ::= IF PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // c1 ::= PINTAR PARENTESIS_A idColor COMA idImagen COMA posX COMA posX PARENTESIS_B PUNTO_COMA c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c ::= INSTRUCCIONES PARENTESIS_A ID PARENTESIS_B AGRUPACION_A c1 AGRUPACION_B COMA4 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // b5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // b5 ::= COMA ID IGUAL FALSE NT$12 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$12 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) {  ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // b5 ::= COMA ID IGUAL TRUE NT$11 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // b5 ::= COMA ID NT$10 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$10 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // b4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // b4 ::= COMA ID NT$9 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor);  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // b4 ::= COMA ID IGUAL COMILLAS ID COMILLAS NT$8 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // b3 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // b3 ::= COMA ID IGUAL b2prima1 NT$7 b3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(b!=null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // b2prima2 ::= b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // b2prima2 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 RESULT=(Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // b2prima2 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(aDevolver == null){ System.out.println("error lexico"); } RESULT=aDevolver; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // b2prima2 ::= NUMERO DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(b == null) { System.out.println("error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // b2prima2 ::= ID DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null){ System.out.println("Error Semantico"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // b2prima2 ::= NUMERO POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(b==null) { System.out.println("Error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // b2prima2 ::= ID POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id==null){ System.out.println("Error semantico"); } else { if(b==null) { RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // b2prima1 ::= 
            {
              Integer RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // b2prima1 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 RESULT=(Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // b2prima1 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(aDevolver == null){ System.out.println("error lexico"); } RESULT=aDevolver; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // b2prima1 ::= NUMERO DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(b == null) { System.out.println("error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // b2prima1 ::= ID DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null){ System.out.println("Error Semantico5"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // b2prima1 ::= NUMERO POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(b==null) { System.out.println("Error semantico2"); RESULT=null; } else { Integer aDevolver = (Integer) a * b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b2prima1 ::= ID POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id==null){ System.out.println("Error semantico4"); } else { if(b==null) { RESULT=null; } else { Integer aDevolver = id * b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b2prima1 ::= NUMERO MAS b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(b==null){ System.out.println("Error semantico1"); RESULT=null; } else { Integer aDevolver = (Integer) a + b; RESULT=aDevolver; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b2prima1 ::= ID MAS b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null) { System.out.println("Error semantico99"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id + b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b1 ::= BOOLEAN ID IGUAL FALSE NT$6 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false); parser.tabla.agregarDato(parser.listValores, valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b1 ::= BOOLEAN ID IGUAL TRUE NT$5 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true); parser.tabla.agregarDato(parser.listValores, valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b1 ::= BOOLEAN ID NT$4 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { /*Aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b1 ::= STRING ID NT$3 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null);  parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b1 ::= STRING ID IGUAL COMILLAS ID COMILLAS NT$2 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // b1 ::= INT ID NT$1 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // b1 ::= INT ID IGUAL b2prima1 NT$0 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(b != null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= VARS AGRUPACION_A b1 AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= b c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPNT$parser.done_parsing();
          return CUP$SintaxPNT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

