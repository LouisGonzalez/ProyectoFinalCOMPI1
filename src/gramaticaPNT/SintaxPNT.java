
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 21 23:10:42 CST 2020
//----------------------------------------------------

package gramaticaPNT;

import java_cup.runtime.Symbol;
import pollitos.*;
import java.util.ArrayList;
import OperacionesPNT.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 21 23:10:42 CST 2020
  */
public class SintaxPNT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPNT() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\040\002\000\002\021\012\000\002\041\002" +
    "\000\002\021\010\000\002\042\002\000\002\021\014\000" +
    "\002\043\002\000\002\021\010\000\002\044\002\000\002" +
    "\021\010\000\002\045\002\000\002\021\012\000\002\046" +
    "\002\000\002\021\012\000\002\021\002\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\002\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\002\000\002\047\002\000\002\004\010\000\002" +
    "\004\002\000\002\050\002\000\002\005\012\000\002\051" +
    "\002\000\002\005\006\000\002\005\002\000\002\052\002" +
    "\000\002\022\006\000\002\053\002\000\002\022\010\000" +
    "\002\054\002\000\002\022\010\000\002\022\002\000\002" +
    "\055\002\000\002\010\013\000\002\056\002\000\002\057" +
    "\002\000\002\011\020\000\002\060\002\000\002\061\002" +
    "\000\002\011\014\000\002\062\002\000\002\063\002\000" +
    "\002\064\002\000\002\011\015\000\002\011\004\000\002" +
    "\011\002\000\002\065\002\000\002\066\002\000\002\067" +
    "\002\000\002\020\012\000\002\070\002\000\002\020\004" +
    "\000\002\007\006\000\002\007\010\000\002\007\006\000" +
    "\002\007\006\000\002\071\002\000\002\032\005\000\002" +
    "\030\003\000\002\030\003\000\002\072\002\000\002\031" +
    "\006\000\002\073\002\000\002\031\006\000\002\031\002" +
    "\000\002\033\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\005\000\002" +
    "\035\003\000\002\035\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\003\000\002\017\003\000\002" +
    "\017\002\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\033\006\001\002\000\004\041\137\001" +
    "\002\000\004\002\136\001\002\000\004\024\007\001\002" +
    "\000\012\025\ufff0\034\013\035\010\036\012\001\002\000" +
    "\004\047\107\001\002\000\004\025\106\001\002\000\004" +
    "\047\053\001\002\000\004\047\014\001\002\000\010\004" +
    "\ufffc\006\ufffc\012\016\001\002\000\006\004\023\006\uffdb" +
    "\001\002\000\012\004\uffe7\006\uffe7\046\017\047\020\001" +
    "\002\000\014\004\uffe8\006\uffe8\026\042\030\044\052\043" +
    "\001\002\000\014\004\uffe9\006\uffe9\026\034\030\036\052" +
    "\035\001\002\000\006\004\ufffe\006\ufffe\001\002\000\006" +
    "\004\023\006\uffdb\001\002\000\004\047\027\001\002\000" +
    "\004\006\025\001\002\000\012\025\ufff0\034\013\035\010" +
    "\036\012\001\002\000\004\025\ufffd\001\002\000\004\012" +
    "\030\001\002\000\012\004\uffe7\006\uffe7\046\017\047\020" +
    "\001\002\000\006\004\uffdd\006\uffdd\001\002\000\006\004" +
    "\023\006\uffdb\001\002\000\004\006\uffdc\001\002\000\012" +
    "\004\uffe7\006\uffe7\046\017\047\020\001\002\000\012\004" +
    "\uffe7\006\uffe7\046\017\047\020\001\002\000\012\004\uffe7" +
    "\006\uffe7\046\017\047\020\001\002\000\006\004\uffed\006" +
    "\uffed\001\002\000\006\004\uffeb\006\uffeb\001\002\000\006" +
    "\004\uffef\006\uffef\001\002\000\012\004\uffe7\006\uffe7\046" +
    "\017\047\020\001\002\000\012\004\uffe7\006\uffe7\046\017" +
    "\047\020\001\002\000\012\004\uffe7\006\uffe7\046\017\047" +
    "\020\001\002\000\006\004\uffec\006\uffec\001\002\000\006" +
    "\004\uffea\006\uffea\001\002\000\006\004\uffee\006\uffee\001" +
    "\002\000\004\006\051\001\002\000\012\025\ufff0\034\013" +
    "\035\010\036\012\001\002\000\004\025\ufffb\001\002\000" +
    "\010\004\ufff6\006\ufff6\012\054\001\002\000\006\037\074" +
    "\040\075\001\002\000\006\004\056\006\uffcf\001\002\000" +
    "\004\047\062\001\002\000\004\006\060\001\002\000\012" +
    "\025\ufff0\034\013\035\010\036\012\001\002\000\004\025" +
    "\ufff5\001\002\000\010\004\uffd5\006\uffd5\012\064\001\002" +
    "\000\006\004\056\006\uffcf\001\002\000\006\037\065\040" +
    "\066\001\002\000\006\004\uffd3\006\uffd3\001\002\000\006" +
    "\004\uffd1\006\uffd1\001\002\000\006\004\056\006\uffcf\001" +
    "\002\000\004\006\uffd0\001\002\000\006\004\056\006\uffcf" +
    "\001\002\000\004\006\uffd2\001\002\000\004\006\uffd4\001" +
    "\002\000\006\004\ufff4\006\ufff4\001\002\000\006\004\ufff2" +
    "\006\ufff2\001\002\000\006\004\056\006\uffcf\001\002\000" +
    "\004\006\100\001\002\000\012\025\ufff0\034\013\035\010" +
    "\036\012\001\002\000\004\025\ufff1\001\002\000\006\004" +
    "\056\006\uffcf\001\002\000\004\006\104\001\002\000\012" +
    "\025\ufff0\034\013\035\010\036\012\001\002\000\004\025" +
    "\ufff3\001\002\000\004\041\uffff\001\002\000\010\004\ufff8" +
    "\006\ufff8\012\111\001\002\000\006\004\117\006\uffd6\001" +
    "\002\000\004\007\112\001\002\000\004\047\113\001\002" +
    "\000\004\007\114\001\002\000\006\004\ufffa\006\ufffa\001" +
    "\002\000\006\004\117\006\uffd6\001\002\000\004\006\131" +
    "\001\002\000\004\047\120\001\002\000\010\004\uffd8\006" +
    "\uffd8\012\121\001\002\000\004\007\124\001\002\000\006" +
    "\004\117\006\uffd6\001\002\000\004\006\uffd7\001\002\000" +
    "\004\047\125\001\002\000\004\007\126\001\002\000\006" +
    "\004\uffda\006\uffda\001\002\000\006\004\117\006\uffd6\001" +
    "\002\000\004\006\uffd9\001\002\000\012\025\ufff0\034\013" +
    "\035\010\036\012\001\002\000\004\025\ufff9\001\002\000" +
    "\004\006\134\001\002\000\012\025\ufff0\034\013\035\010" +
    "\036\012\001\002\000\004\025\ufff7\001\002\000\004\002" +
    "\001\001\002\000\004\022\141\001\002\000\004\002\000" +
    "\001\002\000\004\047\142\001\002\000\004\023\uffce\001" +
    "\002\000\004\023\144\001\002\000\004\024\145\001\002" +
    "\000\014\025\uffc1\042\147\043\153\045\152\047\146\001" +
    "\002\000\004\012\333\001\002\000\004\022\246\001\002" +
    "\000\004\025\243\001\002\000\016\021\uffc1\025\uffc1\042" +
    "\147\043\153\045\152\047\146\001\002\000\004\022\230" +
    "\001\002\000\004\022\154\001\002\000\012\037\161\040" +
    "\162\046\155\047\156\001\002\000\024\011\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\023\uffb3\050\uffb3\051" +
    "\uffb3\001\002\000\024\011\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\023\uffac\050\uffac\051\uffac\001\002\000" +
    "\016\011\220\013\221\014\222\015\224\016\225\017\223" +
    "\001\002\000\004\023\uffc9\001\002\000\010\023\uffab\050" +
    "\uffab\051\uffab\001\002\000\010\023\uffaa\050\uffaa\051\uffaa" +
    "\001\002\000\010\023\uffb6\050\uffb6\051\uffb6\001\002\000" +
    "\010\023\uffae\050\165\051\167\001\002\000\012\037\161" +
    "\040\162\046\155\047\156\001\002\000\004\023\uffb5\001" +
    "\002\000\012\037\161\040\162\046\155\047\156\001\002" +
    "\000\010\023\uffb0\050\uffb0\051\uffb0\001\002\000\010\023" +
    "\uffae\050\165\051\167\001\002\000\004\023\uffaf\001\002" +
    "\000\010\023\uffb2\050\uffb2\051\uffb2\001\002\000\010\023" +
    "\uffae\050\165\051\167\001\002\000\004\023\uffb1\001\002" +
    "\000\004\023\177\001\002\000\004\020\200\001\002\000" +
    "\014\021\uffc1\042\147\043\153\045\152\047\146\001\002" +
    "\000\004\021\uffc8\001\002\000\004\021\203\001\002\000" +
    "\020\021\uffbc\025\uffbc\042\uffbc\043\uffbc\044\204\045\uffbc" +
    "\047\uffbc\001\002\000\004\020\210\001\002\000\006\021" +
    "\uffc7\025\uffc7\001\002\000\016\021\uffc1\025\uffc1\042\147" +
    "\043\153\045\152\047\146\001\002\000\006\021\uffbb\025" +
    "\uffbb\001\002\000\014\021\uffc0\042\uffc0\043\uffc0\045\uffc0" +
    "\047\uffc0\001\002\000\014\021\uffc1\042\147\043\153\045" +
    "\152\047\146\001\002\000\004\021\uffbf\001\002\000\004" +
    "\021\214\001\002\000\016\021\uffbe\025\uffbe\042\uffbe\043" +
    "\uffbe\045\uffbe\047\uffbe\001\002\000\016\021\uffc1\025\uffc1" +
    "\042\147\043\153\045\152\047\146\001\002\000\006\021" +
    "\uffbd\025\uffbd\001\002\000\006\046\155\047\226\001\002" +
    "\000\006\046\uff99\047\uff99\001\002\000\006\046\uff98\047" +
    "\uff98\001\002\000\006\046\uff97\047\uff97\001\002\000\006" +
    "\046\uff94\047\uff94\001\002\000\006\046\uff96\047\uff96\001" +
    "\002\000\006\046\uff95\047\uff95\001\002\000\010\023\uffb4" +
    "\050\uffb4\051\uffb4\001\002\000\010\023\uffad\050\uffad\051" +
    "\uffad\001\002\000\012\037\uffc6\040\uffc6\046\uffc6\047\uffc6" +
    "\001\002\000\012\037\161\040\162\046\155\047\156\001" +
    "\002\000\004\023\uffc5\001\002\000\004\023\234\001\002" +
    "\000\004\020\235\001\002\000\014\021\uffc1\042\147\043" +
    "\153\045\152\047\146\001\002\000\004\021\uffc4\001\002" +
    "\000\004\021\240\001\002\000\016\021\uffc1\025\uffc1\042" +
    "\147\043\153\045\152\047\146\001\002\000\006\021\uffc3" +
    "\025\uffc3\001\002\000\006\021\uffc2\025\uffc2\001\002\000" +
    "\006\002\uff9a\041\137\001\002\000\004\002\uffcd\001\002" +
    "\000\004\002\uff9b\001\002\000\006\007\251\047\247\001" +
    "\002\000\004\004\uffa9\001\002\000\004\004\254\001\002" +
    "\000\004\047\252\001\002\000\004\007\253\001\002\000" +
    "\004\004\uffa8\001\002\000\006\007\257\047\255\001\002" +
    "\000\004\004\uffa7\001\002\000\004\004\262\001\002\000" +
    "\004\047\260\001\002\000\004\007\261\001\002\000\004" +
    "\004\uffa6\001\002\000\010\004\uffde\046\264\047\263\001" +
    "\002\000\014\004\uffe0\010\330\026\310\030\312\052\311" +
    "\001\002\000\014\004\uffdf\010\325\026\301\030\304\052" +
    "\303\001\002\000\004\004\uffa1\001\002\000\004\004\uffcc" +
    "\001\002\000\004\004\270\001\002\000\010\023\uffde\046" +
    "\272\047\271\001\002\000\014\010\322\023\uffe0\026\310" +
    "\030\312\052\311\001\002\000\014\010\302\023\uffdf\026" +
    "\301\030\304\052\303\001\002\000\004\023\uff9c\001\002" +
    "\000\004\023\275\001\002\000\004\006\276\001\002\000" +
    "\016\021\uffcb\025\uffcb\042\uffcb\043\uffcb\045\uffcb\047\uffcb" +
    "\001\002\000\016\021\uffc1\025\uffc1\042\147\043\153\045" +
    "\152\047\146\001\002\000\006\021\uffca\025\uffca\001\002" +
    "\000\012\004\uffde\023\uffde\046\306\047\305\001\002\000" +
    "\006\046\320\047\317\001\002\000\012\004\uffde\023\uffde" +
    "\046\306\047\305\001\002\000\012\004\uffde\023\uffde\046" +
    "\306\047\305\001\002\000\014\004\uffe0\023\uffe0\026\310" +
    "\030\312\052\311\001\002\000\014\004\uffdf\023\uffdf\026" +
    "\301\030\304\052\303\001\002\000\006\004\uffe3\023\uffe3" +
    "\001\002\000\012\004\uffde\023\uffde\046\306\047\305\001" +
    "\002\000\012\004\uffde\023\uffde\046\306\047\305\001\002" +
    "\000\012\004\uffde\023\uffde\046\306\047\305\001\002\000" +
    "\006\004\uffe4\023\uffe4\001\002\000\006\004\uffe2\023\uffe2" +
    "\001\002\000\006\004\uffe6\023\uffe6\001\002\000\006\004" +
    "\uffe1\023\uffe1\001\002\000\004\023\uff9d\001\002\000\004" +
    "\023\uff9f\001\002\000\006\004\uffe5\023\uffe5\001\002\000" +
    "\006\046\323\047\324\001\002\000\004\023\uff9e\001\002" +
    "\000\004\023\uffa0\001\002\000\006\046\326\047\327\001" +
    "\002\000\004\004\uffa4\001\002\000\004\004\uffa2\001\002" +
    "\000\006\046\331\047\332\001\002\000\004\004\uffa3\001" +
    "\002\000\004\004\uffa5\001\002\000\016\006\uffe7\007\337" +
    "\037\334\040\336\046\017\047\020\001\002\000\004\006" +
    "\345\001\002\000\004\006\344\001\002\000\004\006\343" +
    "\001\002\000\004\047\340\001\002\000\004\007\341\001" +
    "\002\000\004\006\342\001\002\000\016\021\uffb9\025\uffb9" +
    "\042\uffb9\043\uffb9\045\uffb9\047\uffb9\001\002\000\016\021" +
    "\uffb7\025\uffb7\042\uffb7\043\uffb7\045\uffb7\047\uffb7\001\002" +
    "\000\016\021\uffba\025\uffba\042\uffba\043\uffba\045\uffba\047" +
    "\uffba\001\002\000\016\021\uffb8\025\uffb8\042\uffb8\043\uffb8" +
    "\045\uffb8\047\uffb8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\004\003\003\001\001\000\004\010" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\014\001\001" +
    "\000\004\004\047\001\001\000\004\025\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\021\001\001" +
    "\000\004\004\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\030\001\001\000\004\047\031\001" +
    "\001\000\004\004\032\001\001\000\002\001\001\000\004" +
    "\025\040\001\001\000\004\025\037\001\001\000\004\025" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\046\001\001\000\004\025\045\001" +
    "\001\000\004\025\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\051\001\001\000\002\001\001\000\004\044\054\001\001" +
    "\000\002\001\001\000\004\022\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\060\001\001\000\002" +
    "\001\001\000\004\052\062\001\001\000\004\022\072\001" +
    "\001\000\002\001\001\000\004\053\070\001\001\000\004" +
    "\054\066\001\001\000\004\022\067\001\001\000\002\001" +
    "\001\000\004\022\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\101\001\001\000\004\046\075\001" +
    "\001\000\004\022\076\001\001\000\002\001\001\000\004" +
    "\021\100\001\001\000\002\001\001\000\004\022\102\001" +
    "\001\000\002\001\001\000\004\021\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\107\001\001\000" +
    "\004\005\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\114\001\001\000\004\005" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\121\001\001\000\002\001\001\000\004\005\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\126\001\001\000\004\005\127\001\001\000" +
    "\002\001\001\000\004\021\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\150\011\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\150\011\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\156\032\157\033\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\216\001\001" +
    "\000\004\060\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\163\001\001\000\004\031\165\001\001" +
    "\000\006\030\156\033\172\001\001\000\002\001\001\000" +
    "\006\030\156\033\167\001\001\000\004\073\170\001\001" +
    "\000\004\031\171\001\001\000\002\001\001\000\004\072" +
    "\173\001\001\000\004\031\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\150\011" +
    "\200\001\001\000\004\061\201\001\001\000\002\001\001" +
    "\000\006\020\204\070\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\150\011\206\001\001\000\002" +
    "\001\001\000\004\065\210\001\001\000\006\007\150\011" +
    "\211\001\001\000\004\066\212\001\001\000\002\001\001" +
    "\000\004\067\214\001\001\000\006\007\150\011\215\001" +
    "\001\000\002\001\001\000\004\030\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\230\001\001\000\010\030" +
    "\156\032\231\033\162\001\001\000\004\063\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\150\011" +
    "\235\001\001\000\004\064\236\001\001\000\002\001\001" +
    "\000\006\007\150\011\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\244\017\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\264\036\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\266\001\001\000\002\001\001\000\006\026" +
    "\272\037\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\276\001\001\000\006\007\150\011\277\001\001" +
    "\000\002\001\001\000\004\026\320\001\001\000\002\001" +
    "\001\000\004\026\315\001\001\000\004\026\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\314\001\001\000\004\026\313\001\001\000\004" +
    "\026\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPNT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPNT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPNT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public ArrayList<ValoresPNT> listValores;
    public ArrayList<Pintados> listPintados;
    public ArrayList<Lienzos> listLienzos;
    public ArrayList<Colores> listColores;
    public ArrayList<Tiempos> listTiempos;
    public ArrayList<CuadrosPintar> listPintar;
    public ArrayList<While> listWhiles = new ArrayList<>();
    public While ciclo = new While();
    public TablaSimbolos tabla;
    public boolean esNegativo = false;
    public CondicionesLogicas cond = new CondicionesLogicas();
    public ArrayList<OpAritmeticasWhile> listOp = new ArrayList<>();
    public ArrayList<OpAritmeticasWhile> listOp2 = new ArrayList<>();
    public ArrayList<OpAritmeticasWhile> listAux = new ArrayList<>();
    public Boolean booleanIf = null;
    public Boolean booleanWhile = null;
    public Boolean entro = true;
    public Boolean verificador = false;
    public CondicionWhile condWhile = new CondicionWhile();
    public ArrayList<CondicionWhile> listCondw = new ArrayList<>();
    public Integer contIfs = 0;
    public OpAritmeticaPintar nuevaOpX = null;
    public OpAritmeticaPintar nuevaOpY = null;
    public CasillasAPintar pintadas = new CasillasAPintar();
    public String lienzoActual;
    

    public SintaxPNT(AnalizadorLexico3 lex, ArrayList<ValoresPNT> listValores, TablaSimbolos tabla, ArrayList<Lienzos> listLienzos, ArrayList<Colores> listColores, ArrayList<Tiempos> listTiempos, ArrayList<CuadrosPintar> listPintar, ArrayList<Pintados> listPintados){
        super(lex);
        this.listValores = listValores;
        this.tabla = tabla;
        this.listLienzos = listLienzos;
        this.listColores = listColores;
        this.listTiempos = listTiempos;
        this.listPintar = listPintar;
        this.listPintados = listPintados;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

    public void traspasarDatos(ArrayList<OpAritmeticasWhile> list, ArrayList<OpAritmeticasWhile> aux){
        for(int i = 0; i < list.size(); i++){
            aux.add(list.get(i));
        }
        
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPNT$actions {
  private final SintaxPNT parser;

  /** Constructor */
  CUP$SintaxPNT$actions(SintaxPNT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPNT$do_action(
    int                        CUP$SintaxPNT$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPNT$parser,
    java.util.Stack            CUP$SintaxPNT$stack,
    int                        CUP$SintaxPNT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPNT$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPNT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // relacional ::= DIFERENCIA 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(6); } } RESULT=6; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relacional ::= MAYOR_IGUAL 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(5); } } RESULT=5; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relacional ::= MENOR_IGUAL 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(4); } } RESULT=4; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relacional ::= MAYOR 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(3); } } RESULT=3; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relacional ::= MENOR 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(2); } }  RESULT=2; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relacional ::= DOBLE_IGUAL 
            {
              Integer RESULT =null;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setRelacional(1); } }  RESULT=1; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMA4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COMA4 ::= c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // posY ::= b2prima2 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanIf!=null){ if(parser.booleanIf){ parser.nuevaOpY = new OpAritmeticaPintar(parser.listOp);  } } else { parser.nuevaOpY = new OpAritmeticaPintar(parser.listOp); }   
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // posY ::= NUMERO RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // posY ::= ID RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // posY ::= NUMERO RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // posY ::= ID RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posY",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // posX ::= b2prima2 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanIf!=null){ if(parser.booleanIf){ parser.nuevaOpX = new OpAritmeticaPintar(parser.listOp); } } else { parser.nuevaOpX = new OpAritmeticaPintar(parser.listOp);  } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // posX ::= NUMERO RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // posX ::= ID RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // posX ::= NUMERO RANGO NUMERO 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // posX ::= ID RANGO ID 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 Object[] objeto = new Object[2]; objeto[0] = a; objeto[1] = b; RESULT=objeto; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // idImagen ::= COMILLAS ID COMILLAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		 RESULT=a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // idImagen ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // idColor ::= COMILLAS ID COMILLAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		 RESULT=a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // idColor ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bools ::= FALSE 
            {
              Boolean RESULT =null;
		 if(parser.booleanWhile!= null){ if(parser.booleanWhile){ parser.condWhile.setTipo("Tipo2");  parser.condWhile.setDato1(true); } }  Boolean valor = true; RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bools ::= TRUE 
            {
              Boolean RESULT =null;
		 if(parser.booleanWhile!= null){ if(parser.booleanWhile){ parser.condWhile.setTipo("Tipo2");  parser.condWhile.setDato1(true);  } }  Boolean valor = true; RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bools ::= ID 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile!= null){ if(parser.booleanWhile){ parser.condWhile.setTipo("Tipo2");  parser.condWhile.setDato1(a); } } Boolean valor = parser.tabla.comprobarCondicionTipo2(a.toString(), parser.listValores); RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bools ::= c3 relacional c3 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 parser.condWhile.setTipo("Tipo1");   Boolean valor = parser.tabla.comprobarCondicionTipo1(a, (Integer) b, c); RESULT=valor; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("bools",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ext ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		 ArrayList<TipoEncadenamiento> booleanos = new ArrayList<>(); RESULT=booleanos;  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ext ::= OR bools NT$27 ext 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ArrayList<TipoEncadenamiento>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> b = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		   TipoEncadenamiento tipo = new TipoEncadenamiento("OR", Boolean.valueOf(a.toString())); b.add(tipo); RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$27 ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
  if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setCadena("OR"); parser.listCondw.add(parser.condWhile); parser.condWhile = new CondicionWhile(); } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$27",57, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ext ::= AND bools NT$26 ext 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (ArrayList<TipoEncadenamiento>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> b = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  TipoEncadenamiento tipo = new TipoEncadenamiento("AND", Boolean.valueOf(a.toString())); b.add(tipo); RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$26 ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.condWhile.setCadena("AND"); parser.listCondw.add(parser.condWhile); parser.condWhile = new CondicionWhile(); } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$26",56, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // c3 ::= NUMERO 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  if(parser.booleanWhile != null){ if(parser.booleanWhile){ if(parser.condWhile.getDato1()!=null){ parser.condWhile.setDato2(a); } else { parser.condWhile.setDato1(a); } } }  Objeto nuevo = new Objeto(a, "Integer");  RESULT=nuevo; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // c3 ::= ID 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		  if(parser.booleanWhile != null){ if(parser.booleanWhile){if(parser.condWhile.getDato1()!=null){ parser.condWhile.setDato1(a); } else { parser.condWhile.setDato1(a); } } }           Objeto nuevo = parser.tabla.devolverUnObjeto(a.toString(), parser.listValores);    RESULT=nuevo;  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // c2 ::= bools NT$25 ext 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (ArrayList<TipoEncadenamiento>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> b = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(a != null){ TipoEncadenamiento tipo = new TipoEncadenamiento(null, Boolean.valueOf(a.toString())); b.add(tipo); } RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$25 ::= 
            {
              ArrayList<TipoEncadenamiento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.booleanWhile != null){ if(parser.booleanWhile){ parser.listCondw.add(parser.condWhile); parser.condWhile = new CondicionWhile(); } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$25",55, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // b8 ::= ID IGUAL FALSE PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		 Object objeto = false; parser.tabla.modificarValor(a.toString(), parser.listValores, "Boolean", objeto); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // b8 ::= ID IGUAL TRUE PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		 Object objeto = true; parser.tabla.modificarValor(a.toString(), parser.listValores, "Boolean", objeto); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // b8 ::= ID IGUAL COMILLAS ID COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		 parser.tabla.modificarValor(a.toString(), parser.listValores, "String", b); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // b8 ::= ID IGUAL b2prima1 PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ Operacion op = new Operacion(a.toString()); op.setMiOperacion(parser.listOp); if(parser.booleanIf!=null){ if(parser.booleanIf){ System.out.println("Valor agreagdo"); op.setNoIf(parser.contIfs); } }  parser.ciclo.getListOp().add(op); parser.listOp = new ArrayList<>(); } }  parser.tabla.modificarValor(a.toString(), parser.listValores, "Integer", b); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else1 ::= NT$24 c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("else1",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$24 ::= 
            {
              Object RESULT =null;
 parser.booleanIf = null; if(parser.booleanWhile !=null){ if(parser.booleanWhile == true){ parser.contIfs++; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$24",54, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else1 ::= ELSE LLAVE_A NT$21 c1 NT$22 LLAVE_B NT$23 c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("else1",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 parser.booleanIf = null; if(parser.booleanWhile != null){ if(parser.booleanWhile == true){ parser.contIfs++; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$23",53, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.verificador != null){ 
            if(parser.entro){ 
                if(!parser.verificador){
                    parser.booleanIf = false; 
                } else { 
                    parser.booleanIf = true; 
                }
            } else { 
                parser.booleanIf = false; 
            } 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$22",52, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$21 ::= 
            {
              Object RESULT =null;
 if(parser.verificador != null){ 
            if(parser.entro){ 
                if(!parser.verificador){ 
                    parser.booleanIf = true; 
                } else { 
                    parser.booleanIf = false; 
                } 
            } 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$21",51, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c1 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c1 ::= b8 c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c1 ::= WHILE PARENTESIS_A NT$18 c2 NT$19 PARENTESIS_B LLAVE_A c1 NT$20 LLAVE_B c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.booleanIf != null){ if(parser.booleanIf){   parser.cond.repetirCiclo(a, parser.ciclo, parser.listValores, parser.listPintados, parser.lienzoActual); parser.booleanWhile = false; } } else {  parser.cond.repetirCiclo(a, parser.ciclo, parser.listValores, parser.listPintados, parser.lienzoActual); parser.booleanWhile = false; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$20",50, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
  parser.ciclo.setMiCondicional(parser.listCondw);  parser.booleanWhile = null;  if(parser.booleanWhile == null){ 
            parser.entro = true; 
            if(parser.cond.verificar(a) == null){ 
                parser.verificador = null; 
                parser.booleanWhile = null; 
            } else { 
                if(!parser.cond.verificar(a)){ 
                    parser.verificador = false; 
                    parser.booleanWhile = false; 
                } else if(parser.cond.verificar(a)) { 
                    parser.verificador = true; 
                    parser.booleanWhile = true; 
                } 
            } 
        } else if(parser.booleanWhile == true){
            parser.entro = true; 
            if(parser.cond.verificar(a) == null){ 
                parser.verificador = null; 
                parser.booleanWhile = null; 
            } else { 
                if(!parser.cond.verificar(a)){ 
                    parser.verificador = false; 
                    parser.booleanWhile = false; 
                } else { 
                    parser.verificador = true; 
                    parser.booleanWhile = true; 
                } 
            } 
        } else { 
            parser.entro = false;   
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$19",49, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$18 ::= 
            {
              Object RESULT =null;
parser.booleanWhile = true;
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$18",48, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c1 ::= IF PARENTESIS_A c2 NT$16 PARENTESIS_B LLAVE_A c1 NT$17 LLAVE_B else1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.cond.verificar(a) != null){ 
            if(parser.entro){ 
                if(!parser.cond.verificar(a)){
                    parser.booleanIf = false; 
                } else { 
                    parser.booleanIf = true; 
                } 
            } else { 
                parser.booleanIf = false; 
            } 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$17",47, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<TipoEncadenamiento> a = (ArrayList<TipoEncadenamiento>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 
        if(parser.booleanWhile != null){
            if(parser.booleanWhile){ 
                System.out.println("Entro aquii");
                CondicionalIf cond = new CondicionalIf(a, parser.contIfs); 
                parser.ciclo.setCondicional(cond); 
            }
        }
        if( parser.booleanIf == null){ 
            parser.entro = true; 
            if(parser.cond.verificar(a) == null){ 
                parser.verificador = null; 
                parser.booleanIf = false; 
            } else { 
                if(!parser.cond.verificar(a)){ 
                    parser.verificador = false; 
                    parser.booleanIf = false; 
                } else { 
                    parser.verificador = true; 
                    parser.booleanIf = true; 
                } 
            } 
        } else if (parser.booleanIf == true){
            parser.entro = true; 
            if(parser.cond.verificar(a) == null){ 
                parser.verificador = null; 
                parser.booleanIf = false; 
            } else { 
                if(!parser.cond.verificar(a)){ 
                    parser.verificador = false; 
                    parser.booleanIf = false; 
                } else { 
                    parser.verificador = true; 
                    parser.booleanIf = true; 
                } 
            }
        } else { 
            parser.entro = false; 
        } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$16",46, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c1 ::= PINTAR PARENTESIS_A idColor COMA idImagen COMA posX NT$14 COMA posY PARENTESIS_B PUNTO_COMA NT$15 c1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object[] d = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object[] d = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
  if(parser.booleanIf == null || parser.booleanIf){ 
            System.out.println("cumplo "+b.toString()); 
            CuadrosPintar cuadros = new CuadrosPintar(a.toString(), b.toString()); 
            if(parser.nuevaOpX != null){
                cuadros.setOpX(parser.listAux);
            } else {
                cuadros.setRangoX(c); 
            }
            if(parser.nuevaOpY != null){
                cuadros.setOpY(parser.listOp);
                parser.listOp = new ArrayList<>();
            } else {
                cuadros.setRangoY(d);
            }
            parser.nuevaOpX = null;
            parser.nuevaOpY = null;
            parser.listAux = new ArrayList<>();
            parser.pintadas.determinarCasillas(cuadros, parser.listValores, parser.listPintados, parser.tabla, parser.lienzoActual);
            parser.listPintar.add(cuadros); 
            if(parser.booleanWhile != null){
                if(parser.booleanWhile){
                    cuadros.setEnWhile(true);
                    cuadros.setNoIf(parser.contIfs);    
                    parser.ciclo.getListPorPintar().add(cuadros);
                    System.out.println("aqui si entro moderfocker");
                }
            }
        } else {
            System.out.println("Habia un valor nulo");
            parser.listOp = new ArrayList<>();
            parser.nuevaOpX = null;
            parser.nuevaOpY = null;
        }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$15",45, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(parser.nuevaOpX != null){ parser.traspasarDatos(parser.listOp, parser.listAux); } parser.listOp = new ArrayList<>();  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$14",44, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c ::= INSTRUCCIONES PARENTESIS_A ID NT$13 PARENTESIS_B AGRUPACION_A c1 AGRUPACION_B COMA4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 parser.lienzoActual = a.toString(); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$13",43, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // b5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // b5 ::= COMA ID IGUAL FALSE NT$12 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$12 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) {  ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$12",42, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // b5 ::= COMA ID IGUAL TRUE NT$11 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$11 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$11",41, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // b5 ::= COMA ID NT$10 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",16, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$10 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$10",40, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // b4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // b4 ::= COMA ID NT$9 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor);  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$9",39, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // b4 ::= COMA ID IGUAL COMILLAS ID COMILLAS NT$8 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // b3 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // b3 ::= COMA ID IGUAL b2prima1 NT$7 b3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(b!=null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // b2prima2 ::= 
            {
              Integer RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // b2prima2 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 System.out.println("AGREGADO "+a.toString()); if(parser.booleanIf != null){ if(parser.booleanIf){  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "Integer");  parser.listOp.add(opWhile); } } else { OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "Integer");  parser.listOp.add(opWhile); }  RESULT=(Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // b2prima2 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 System.out.println("AGREGADO "+a.toString()); if(parser.booleanIf != null){ if(parser.booleanIf){    OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "String");   parser.listOp.add(opWhile); } } else {  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "String");   parser.listOp.add(opWhile); }   Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(aDevolver == null){ System.out.println("error lexico "+a.toString()); } RESULT=aDevolver; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // b2prima2 ::= NUMERO DIV b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 System.out.println("Agreagado aqui");  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "Integer");   parser.listOp.add(opWhile);   if(b == null) { System.out.println("error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // b2prima2 ::= ID DIV b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "String");  parser.listOp.add(opWhile);  Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null){ System.out.println("Error Semantico5"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // b2prima2 ::= NUMERO POR b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "Integer");   parser.listOp.add(opWhile);   if(b==null) { System.out.println("Error semantico2"); RESULT=null; } else { Integer aDevolver = (Integer) a * b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // b2prima2 ::= ID POR b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "String");    parser.listOp.add(opWhile);   Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id==null){ System.out.println("Error semantico4"); } else { if(b==null) { RESULT=null; } else { Integer aDevolver = id * b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // b2prima2 ::= NUMERO MAS b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "Integer");   parser.listOp.add(opWhile);  if(b==null){ System.out.println("Error semantico1"); RESULT=null; } else { Integer aDevolver = (Integer) a + b; RESULT=aDevolver; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // b2prima2 ::= ID MAS b2prima2 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		   OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "String");  parser.listOp.add(opWhile);   Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null) { System.out.println("Error semantico99"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id + b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima2",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // b2prima1 ::= 
            {
              Integer RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // b2prima1 ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "Integer");  parser.listOp.add(opWhile); } }  RESULT=(Integer) a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // b2prima1 ::= ID 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, null, "String");   parser.listOp.add(opWhile); } }  Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(aDevolver == null){ System.out.println("error lexico "+a.toString()); } RESULT=aDevolver; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // b2prima1 ::= NUMERO DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "Integer");   parser.listOp.add(opWhile);  } }  if(b == null) { System.out.println("error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // b2prima1 ::= ID DIV b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "DIV", "String");  parser.listOp.add(opWhile);  } } Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null){ System.out.println("Error Semantico5"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // b2prima1 ::= NUMERO POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "Integer");   parser.listOp.add(opWhile);  } }  if(b==null) { System.out.println("Error semantico2"); RESULT=null; } else { Integer aDevolver = (Integer) a * b; RESULT=aDevolver; }  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b2prima1 ::= ID POR b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "MULT", "String");    parser.listOp.add(opWhile); } }  Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id==null){ System.out.println("Error semantico4"); } else { if(b==null) { RESULT=null; } else { Integer aDevolver = id * b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b2prima1 ::= NUMERO MAS b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){ OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "Integer");   parser.listOp.add(opWhile);  } } if(b==null){ System.out.println("Error semantico1"); RESULT=null; } else { Integer aDevolver = (Integer) a + b; RESULT=aDevolver; } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b2prima1 ::= ID MAS b2prima1 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 if(parser.booleanWhile != null){ if(parser.booleanWhile){  OpAritmeticasWhile opWhile = new OpAritmeticasWhile(a, "SUMA", "String");  parser.listOp.add(opWhile);  } }  Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null) { System.out.println("Error semantico99"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id + b; RESULT=aDevolver; } } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima1",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b1 ::= BOOLEAN ID IGUAL FALSE NT$6 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false); parser.tabla.agregarDato(parser.listValores, valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b1 ::= BOOLEAN ID IGUAL TRUE NT$5 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true); parser.tabla.agregarDato(parser.listValores, valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b1 ::= BOOLEAN ID NT$4 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { /*Aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b1 ::= STRING ID NT$3 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null);  parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b1 ::= STRING ID IGUAL COMILLAS ID COMILLAS NT$2 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // b1 ::= INT ID NT$1 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // b1 ::= INT ID IGUAL b2prima1 NT$0 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",15, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(b != null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= VARS AGRUPACION_A b1 AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= b c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPNT$parser.done_parsing();
          return CUP$SintaxPNT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

