
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 08 22:57:58 CST 2020
//----------------------------------------------------

package gramaticaLNZ;

import pollitos.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 08 22:57:58 CST 2020
  */
public class SintaxLNZ extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxLNZ() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxLNZ(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxLNZ(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\011\000\002\003" +
    "\010\000\002\005\010\000\002\005\010\000\002\005\010" +
    "\000\002\005\010\000\002\005\010\000\002\005\010\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\007\005\000\002\012\006\000\002\012\006\000\002\012" +
    "\006\000\002\006\004\000\002\006\002\000\002\004\004" +
    "\000\002\004\002\000\002\011\004\000\002\011\002\000" +
    "\002\013\004\000\002\013\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\006\005\001\002\000\004\002\123\001" +
    "\002\000\004\005\006\001\002\000\004\010\007\001\002" +
    "\000\004\006\010\001\002\000\004\030\012\001\002\000" +
    "\004\007\121\001\002\000\004\010\013\001\002\000\004" +
    "\006\014\001\002\000\012\012\017\013\015\014\021\015" +
    "\016\001\002\000\004\010\111\001\002\000\004\010\066" +
    "\001\002\000\004\010\061\001\002\000\004\007\055\001" +
    "\002\000\004\010\022\001\002\000\004\006\023\001\002" +
    "\000\012\016\026\017\024\020\031\026\025\001\002\000" +
    "\004\010\052\001\002\000\004\010\050\001\002\000\004" +
    "\010\045\001\002\000\004\007\043\001\002\000\004\007" +
    "\037\001\002\000\004\010\032\001\002\000\004\027\033" +
    "\001\002\000\006\004\034\007\uffec\001\002\000\010\016" +
    "\026\017\024\020\031\001\002\000\004\007\ufff7\001\002" +
    "\000\004\007\uffed\001\002\000\006\004\040\007\ufff0\001" +
    "\002\000\012\012\017\013\015\014\021\015\016\001\002" +
    "\000\004\007\ufffb\001\002\000\004\007\ufff1\001\002\000" +
    "\006\004\040\007\ufff0\001\002\000\004\007\ufffa\001\002" +
    "\000\004\027\046\001\002\000\006\004\034\007\uffec\001" +
    "\002\000\004\007\ufff8\001\002\000\004\031\051\001\002" +
    "\000\004\007\ufff5\001\002\000\004\027\053\001\002\000" +
    "\006\004\034\007\uffec\001\002\000\004\007\ufff6\001\002" +
    "\000\006\004\056\007\uffee\001\002\000\004\030\012\001" +
    "\002\000\004\007\uffff\001\002\000\004\007\uffef\001\002" +
    "\000\004\011\062\001\002\000\004\032\063\001\002\000" +
    "\004\011\064\001\002\000\006\004\040\007\ufff0\001\002" +
    "\000\004\007\ufffe\001\002\000\004\006\067\001\002\000" +
    "\010\021\072\022\070\023\073\001\002\000\004\010\106" +
    "\001\002\000\004\007\104\001\002\000\004\010\101\001" +
    "\002\000\004\010\074\001\002\000\004\027\075\001\002" +
    "\000\006\004\076\007\uffea\001\002\000\010\021\072\022" +
    "\070\023\073\001\002\000\004\007\ufff2\001\002\000\004" +
    "\007\uffeb\001\002\000\004\027\102\001\002\000\006\004" +
    "\076\007\uffea\001\002\000\004\007\ufff4\001\002\000\006" +
    "\004\040\007\ufff0\001\002\000\004\007\ufff9\001\002\000" +
    "\004\027\107\001\002\000\006\004\076\007\uffea\001\002" +
    "\000\004\007\ufff3\001\002\000\004\011\112\001\002\000" +
    "\006\024\114\025\113\001\002\000\004\011\117\001\002" +
    "\000\004\011\115\001\002\000\006\004\040\007\ufff0\001" +
    "\002\000\004\007\ufffd\001\002\000\006\004\040\007\ufff0" +
    "\001\002\000\004\007\ufffc\001\002\000\004\007\122\001" +
    "\002\000\004\002\000\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\026\010\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\034\001\001\000\004\010" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\040\001\001\000\004\005\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\053\001\001\000\002\001\001\000" +
    "\004\004\056\001\001\000\004\003\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\076\001\001\000" +
    "\004\012\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\102\001\001\000\002\001" +
    "\001\000\004\006\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\115\001\001\000\002\001\001\000" +
    "\004\006\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxLNZ$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxLNZ$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxLNZ$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Lienzos> listLienzos;

    public SintaxLNZ(AnalizadorLexico2 lex, ArrayList<Lienzos> listLienzos){
        super(lex);
        this.listLienzos = listLienzos;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

    public void traspasarDatosArreglo(ArrayList<Lienzos> listLienzos, ArrayList<Lienzos> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listLienzos.add(listTemporal.get(i));
        }

    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxLNZ$actions {
  private final SintaxLNZ parser;

  /** Constructor */
  CUP$SintaxLNZ$actions(SintaxLNZ parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxLNZ$do_action(
    int                        CUP$SintaxLNZ$act_num,
    java_cup.runtime.lr_parser CUP$SintaxLNZ$parser,
    java.util.Stack            CUP$SintaxLNZ$stack,
    int                        CUP$SintaxLNZ$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxLNZ$result;

      /* select the action based on the action number */
      switch (CUP$SintaxLNZ$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMA4 ::= 
            {
              LienzoSize RESULT =null;
		 LienzoSize size = new LienzoSize(); RESULT=size; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA4",9, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMA4 ::= COMA g 
            {
              LienzoSize RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoSize a = (LienzoSize)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA4",9, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMA3 ::= 
            {
              LienzoColor RESULT =null;
		 LienzoColor color = new LienzoColor(); RESULT=color; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA3",7, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMA3 ::= COMA e 
            {
              LienzoColor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoColor a = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA3",7, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMA2 ::= 
            {
              ArrayList<Lienzos> RESULT =null;
		 ArrayList<Lienzos> listLienzos = new ArrayList<>(); RESULT=listLienzos; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA2",2, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMA2 ::= COMA b 
            {
              ArrayList<Lienzos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		ArrayList<Lienzos> a = (ArrayList<Lienzos>)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA2",2, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMA1 ::= 
            {
              Lienzos RESULT =null;
		 Lienzos lienzo = new Lienzos(); RESULT=lienzo; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA1",4, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMA1 ::= COMA c 
            {
              Lienzos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("COMA1",4, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // g ::= dimension_y DOS_PUNTOS NUMERO COMA4 
            {
              LienzoSize RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoSize a = (LienzoSize)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getCuadrosY() == null){ a.setCuadrosY((Integer) b); } else { System.out.println("ya hay un cuadrosY"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("g",8, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // g ::= dimension_x DOS_PUNTOS NUMERO COMA4 
            {
              LienzoSize RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoSize a = (LienzoSize)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getCuadrosX() == null){ a.setCuadrosX((Integer) b); } else { System.out.println("ya hay un cuadrosX"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("g",8, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // g ::= cuadro DOS_PUNTOS NUMERO COMA4 
            {
              LienzoSize RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoSize a = (LienzoSize)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getDimensionCuadros()==null){ a.setDimensionCuadros((Integer) b); } else { System.out.println("ya hay un dimension cuadros"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("g",8, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // f ::= HEX DOS_PUNTOS codigoHex 
            {
              LienzoColor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 LienzoColor color = new LienzoColor(); color.setColorHex(a.toString()); RESULT=color; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("f",5, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // e ::= Green DOS_PUNTOS NUMERO COMA3 
            {
              LienzoColor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoColor a = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getVerde() == null){ a.setVerde((Integer) b); } else { System.out.println("ya hay un verde"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // e ::= Blue DOS_PUNTOS NUMERO COMA3 
            {
              LienzoColor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoColor a = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getAzul() == null){ a.setAzul((Integer) b); } else { System.out.println("ya hay un azul"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // e ::= Red DOS_PUNTOS NUMERO COMA3 
            {
              LienzoColor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		LienzoColor a = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getRojo() == null){ a.setRojo((Integer) b); } else { System.out.println("ya hay un rojo"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("e",6, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // c ::= size DOS_PUNTOS LLAVE_A g LLAVE_B COMA1 
            {
              Lienzos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).right;
		LienzoSize b = (LienzoSize)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getMisDimensiones()==null){ if(b.getDimensionCuadros()==null || b.getCuadrosX()==null || b.getCuadrosY()==null){ System.out.println("falta de un atributo en dimensiones"); } else { a.setMisDimensiones(b); } } else { System.out.println("ya existe un size"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c ::= Fondo DOS_PUNTOS LLAVE_A f LLAVE_B COMA1 
            {
              Lienzos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).right;
		LienzoColor b = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getMisColores()==null){ a.setMisColores(b); } else { System.out.println("ya existe un fondo"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // c ::= Fondo DOS_PUNTOS LLAVE_A e LLAVE_B COMA1 
            {
              Lienzos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).right;
		LienzoColor b = (LienzoColor)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getMisColores()==null){ if(b.getRojo()==null || b.getAzul()==null || b.getVerde()==null){ System.out.println("falta de un atributo en colores"); } else {  a.setMisColores(b); } } else { System.out.println("ya existe un fondo"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // c ::= tipo DOS_PUNTOS COMILLAS gif COMILLAS COMA1 
            {
              Lienzos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getTipo()==null){ a.setTipo("gif"); } else { System.out.println("ya existe un tipo"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // c ::= tipo DOS_PUNTOS COMILLAS png COMILLAS COMA1 
            {
              Lienzos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getTipo()==null){ a.setTipo("png"); } else { System.out.println("ya hay un tipo"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // c ::= nombre DOS_PUNTOS COMILLAS PALABRA COMILLAS COMA1 
            {
              Lienzos RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 if(a.getNombre()==null){ a.setNombre(e.toString()); } else { System.out.println("ya hay un nombre"); } RESULT=a; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= ID DOS_PUNTOS LLAVE_A c LLAVE_B COMA2 
            {
              ArrayList<Lienzos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).right;
		Lienzos a = (Lienzos)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()).right;
		ArrayList<Lienzos> b = (ArrayList<Lienzos>)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.peek()).value;
		 a.setNombre(c.toString()); if(a.getTipo()==null || a.getMisColores()==null || a.getMisDimensiones()==null){ System.out.println("Falta de un archivvo"); } else { b.add(a);  }RESULT=b; 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= LLAVE_A LIENZOS DOS_PUNTOS LLAVE_A b LLAVE_B LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).right;
		ArrayList<Lienzos> a = (ArrayList<Lienzos>)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-2)).value;
		 parser.traspasarDatosArreglo(parser.listLienzos, a); 
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          return CUP$SintaxLNZ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)).value;
		RESULT = start_val;
              CUP$SintaxLNZ$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.elementAt(CUP$SintaxLNZ$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxLNZ$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxLNZ$parser.done_parsing();
          return CUP$SintaxLNZ$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

