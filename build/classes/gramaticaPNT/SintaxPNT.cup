package gramaticaPNT;
import java_cup.runtime.Symbol;
import pollitos.*;
import java.util.ArrayList;

parser code {:
    
    public ArrayList<ValoresPNT> listValores;
    public ArrayList<Lienzos> listLienzos;
    public ArrayList<Colores> listColores;
    public ArrayList<Tiempos> listTiempos;
    public ArrayList<CuadrosPintar> listPintar;
    public TablaSimbolos tabla;
    public boolean esNegativo = false;

    public SintaxPNT(AnalizadorLexico3 lex, ArrayList<ValoresPNT> listValores, TablaSimbolos tabla, ArrayList<Lienzos> listLienzos, ArrayList<Colores> listColores, ArrayList<Tiempos> listTiempos, ArrayList<CuadrosPintar> listPintar){
        super(lex);
        this.listValores = listValores;
        this.tabla = tabla;
        this.listLienzos = listLienzos;
        this.listColores = listColores;
        this.listTiempos = listTiempos;
        this.listPintar = listPintar;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }

:}

    terminal COMA, COMENTARIO_A, PUNTO_COMA, COMILLAS, RANGO, DOBLE_IGUAL, IGUAL, MENOR, MAYOR, MENOR_IGUAL,
            MAYOR_IGUAL, DIFERENCIA, LLAVE_A, LLAVE_B, PARENTESIS_A, PARENTESIS_B, AGRUPACION_A, AGRUPACION_B,
            MAS, MENOS, POR, COMENTARIO_B_A, COMENTARIO_B_B, VARS, INT, STRING, BOOLEAN, TRUE, FALSE, 
            INSTRUCCIONES, PINTAR, IF, ELSE, WHILE, NUMERO, ID, AND, OR, DIV;

    non terminal a, b, b3, b4, b6, b8, c, c1, c3, c2, c4, c5, idColor, idImagen, posX, posY, COMA1, COMA2,
                COMA3, COMA4, ext, relacional;

    non terminal ArrayList<ValoresPNT> b1, b5;

    non terminal ArrayList<OperacionesPNT> b2, b2prima;

    non terminal Integer b2prima1, b2prima2, relacional;

    non terminal Object c3;

    non terminal Boolean bools;
   
    start with a;

    a ::= b c
;
    b ::= VARS AGRUPACION_A b1 AGRUPACION_B
;
    b1 ::= INT ID:a IGUAL b2prima1:b {: if(b != null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } :} b3 PUNTO_COMA b1 
    | INT ID:a {: ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); :} b3 PUNTO_COMA b1
    | STRING ID:a IGUAL COMILLAS ID:b COMILLAS {: ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); :} b4 PUNTO_COMA b1
    | STRING ID:a {: ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null);  parser.tabla.agregarDato(parser.listValores, valor); :} b4 PUNTO_COMA b1
    | BOOLEAN ID:a {: if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); } else { /*Aqui ira un mensaje*/ } :} b5 PUNTO_COMA b1
    | BOOLEAN ID:a IGUAL TRUE {: if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true); parser.tabla.agregarDato(parser.listValores, valor); } else { /*aqui ira un mensaje*/ } :} b5 PUNTO_COMA b1
    | BOOLEAN ID:a IGUAL FALSE {: if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false); parser.tabla.agregarDato(parser.listValores, valor); } else { /*aqui ira un mensaje*/ } :} b5 PUNTO_COMA b1
    | 
;
    b2prima1 ::= ID:a MAS b2prima1:b {: Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null) { System.out.println("Error semantico99"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id + b; RESULT=aDevolver; } } :}
    | NUMERO:a MAS b2prima1:b {: if(b==null){ System.out.println("Error semantico1"); RESULT=null; } else { Integer aDevolver = (Integer) a + b; RESULT=aDevolver; } :}
    | ID:a POR b2prima1:b {: Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id==null){ System.out.println("Error semantico4"); } else { if(b==null) { RESULT=null; } else { Integer aDevolver = id * b; RESULT=aDevolver; } } :}
    | NUMERO:a POR b2prima1:b {: if(b==null) { System.out.println("Error semantico2"); RESULT=null; } else { Integer aDevolver = (Integer) a * b; RESULT=aDevolver; }  :}
    | ID:a DIV b2prima1:b {: Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null){ System.out.println("Error Semantico5"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } :}
    | NUMERO:a DIV b2prima1:b {: if(b == null) { System.out.println("error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  :}
    | ID:a {: Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(aDevolver == null){ System.out.println("error lexico"); } RESULT=aDevolver; :}
    | NUMERO:a {: RESULT=(Integer) a; :}
    |   
;

    b2prima2 ::= ID:a POR b2prima1:b {: Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id==null){ System.out.println("Error semantico"); } else { if(b==null) { RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } :}
    | NUMERO:a POR b2prima1:b {: if(b==null) { System.out.println("Error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  :}
    | ID:a DIV b2prima1:b {: Integer id = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(id == null){ System.out.println("Error Semantico"); } else { if(b == null){ RESULT=null; } else { Integer aDevolver = id / b; RESULT=aDevolver; } } :}
    | NUMERO:a DIV b2prima1:b {: if(b == null) { System.out.println("error semantico"); RESULT=null; } else { Integer aDevolver = (Integer) a / b; RESULT=aDevolver; }  :}
    | ID:a {: Integer aDevolver = (Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer"); if(aDevolver == null){ System.out.println("error lexico"); } RESULT=aDevolver; :}
    | NUMERO:a {: RESULT=(Integer) a; :}
    | b2prima1:a {: RESULT=a; :}
;

    b3 ::= COMA ID:a IGUAL b2prima1:b {: if(b!=null){ ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, b, null); parser.tabla.agregarDato(parser.listValores, valor); } :} b3
    |
;
    b4 ::= COMA ID:a IGUAL COMILLAS ID:b COMILLAS {: ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); :} b4
    | COMA ID:a {: ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor);  :} b4
    |
;
    b5 ::= COMA ID:a {: if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } :} b5 
    | COMA ID:a IGUAL TRUE {: if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } :} b5 
    | COMA ID:a IGUAL FALSE {: if(!parser.tabla.verificarId(a.toString(), parser.listValores)) {  ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } :} b5 
    | 
;
    c ::= INSTRUCCIONES PARENTESIS_A ID PARENTESIS_B AGRUPACION_A c1 AGRUPACION_B COMA4
;
    c1 ::= PINTAR PARENTESIS_A idColor COMA idImagen COMA posX COMA posX PARENTESIS_B PUNTO_COMA c1
    | IF PARENTESIS_A c2:a PARENTESIS_B LLAVE_A c1 LLAVE_B c1
    | IF PARENTESIS_A c2:a PARENTESIS_B LLAVE_A c1 LLAVE_B ELSE LLAVE_A c1 LLAVE_B c1
    | WHILE PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B c1
    | b8 c1
    |
;
    b8 ::= ID IGUAL b2  PUNTO_COMA 
    | ID IGUAL COMILLAS ID COMILLAS PUNTO_COMA 
    | ID IGUAL TRUE PUNTO_COMA 
    | ID IGUAL FALSE PUNTO_COMA
;
    c2 ::= bools:a ext:b {: TipoEncadenamiento tipo = new TipoEncadenamiento(null, Boolean.valueOf(a.toString)); b.add(tipo); RESULT=b; :}
;
    c3 ::= ID:a {: Objeto nuevo = parser.tabla.devolverUnObjeto(a.toString(), parser.listValores); RESULT=nuevo;  :}
    | NUMERO:a {: Objeto nuevo = new Objeto(a, "Integer"); RESULT=nuevo; :}
;
    ext ::= AND bools:a ext:b {: TipoEncadenamiento tipo = new TipoEncadenamiento("AND", Boolean.valueOf(a.toString())); b.add(tipo); RESULT=b; :}
    | OR bools:a ext:b {: TipoEncadenamiento tipo = new TipoEncadenamiento("OR", Boolean.valueOf(a.toString())); b.add(tipo); RESULT=b; :}
    | {: ArrayList<TipoEncadenamiento> booleanos = new ArrayList<>(); RESULT=booleanos;  :}
;
    bools ::= c3:a relacional:b c3:c {: Boolean valor = parser.tabla.comprobarCondicionTipo1(a, (Integer) b, c); RESULT=valor; :}
    | ID {: Boolean valor = parser.tabla.comprobarCondicionTipo2(a.toString(), parser.listValores); RESULT=valor; :}
    | TRUE {: Boolean valor = true; RESULT=valor; :}
    | FALSE {: Boolean valor = true; RESULT=valor; :}
;

    idColor ::= ID
    | COMILLAS ID COMILLAS
;
    idImagen ::= ID 
    | COMILLAS ID COMILLAS
;
    posX ::= b2
    | b2 RANGO b2
;
    COMA4 ::= c
    |
;
    relacional ::= DOBLE_IGUAL {: RESULT=1; :}
    | MENOR {: RESULT=2; :}
    | MAYOR {: RESULT=3; :}
    | MENOR_IGUAL {: RESULT=4; :}
    | MAYOR_IGUAL {: RESULT=5; :}
    | DIFERENCIA {: RESULT=6; :}
;
    
