
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 23 11:23:38 CST 2020
//----------------------------------------------------

package gramaticaTMP;

import java_cup.runtime.Symbol;
import pollitos.*;
import java.util.ArrayList;
import InterfazEditorTexto.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 23 11:23:38 CST 2020
  */
public class SintaxTMP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxTMP() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxTMP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxTMP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\011\000\002\004" +
    "\010\000\002\004\004\000\002\005\010\000\002\005\010" +
    "\000\002\005\010\000\002\010\006\000\002\012\010\000" +
    "\002\012\006\000\002\012\004\000\002\003\004\000\002" +
    "\003\002\000\002\006\004\000\002\006\002\000\002\007" +
    "\004\000\002\007\002\000\002\011\004\000\002\011\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\021\005\001\002\000\004\002\076\001" +
    "\002\000\004\013\006\001\002\000\004\005\007\001\002" +
    "\000\004\021\010\001\002\000\006\003\013\011\012\001" +
    "\002\000\004\022\074\001\002\000\004\005\017\001\002" +
    "\000\006\004\014\022\ufff5\001\002\000\006\003\013\011" +
    "\012\001\002\000\004\022\ufffe\001\002\000\004\022\ufff6" +
    "\001\002\000\004\021\020\001\002\000\010\014\023\015" +
    "\024\016\021\001\002\000\004\005\043\001\002\000\004" +
    "\022\041\001\002\000\004\005\034\001\002\000\004\005" +
    "\025\001\002\000\004\006\026\001\002\000\004\011\027" +
    "\001\002\000\004\006\030\001\002\000\006\004\031\022" +
    "\ufff3\001\002\000\010\014\023\015\024\016\021\001\002" +
    "\000\004\022\ufffc\001\002\000\004\022\ufff4\001\002\000" +
    "\004\006\035\001\002\000\004\011\036\001\002\000\004" +
    "\006\037\001\002\000\006\004\031\022\ufff3\001\002\000" +
    "\004\022\ufffd\001\002\000\006\004\014\022\ufff5\001\002" +
    "\000\004\022\uffff\001\002\000\004\007\044\001\002\000" +
    "\004\021\046\001\002\000\004\010\072\001\002\000\010" +
    "\003\047\017\052\020\050\001\002\000\006\004\057\022" +
    "\uffef\001\002\000\004\005\066\001\002\000\004\022\062" +
    "\001\002\000\004\005\053\001\002\000\004\006\054\001" +
    "\002\000\004\011\055\001\002\000\004\006\056\001\002" +
    "\000\006\004\057\022\uffef\001\002\000\010\003\047\017" +
    "\052\020\050\001\002\000\004\022\ufff9\001\002\000\004" +
    "\022\ufff0\001\002\000\006\004\063\010\ufff1\001\002\000" +
    "\004\021\046\001\002\000\004\010\ufffa\001\002\000\004" +
    "\010\ufff2\001\002\000\004\012\067\001\002\000\006\004" +
    "\057\022\uffef\001\002\000\004\022\ufff8\001\002\000\004" +
    "\022\ufff7\001\002\000\006\004\031\022\ufff3\001\002\000" +
    "\004\022\ufffb\001\002\000\004\022\075\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\014\001\001\000\004\004\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\031\001\001\000\004" +
    "\005\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\037\001\001\000\002\001\001\000\004\003\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\044" +
    "\001\001\000\002\001\001\000\004\012\050\001\001\000" +
    "\004\011\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\057\001\001\000\004\012\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\063\001\001\000\004\010\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxTMP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxTMP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxTMP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Tiempos> listTiempos;
    public static String totalErrores = "";
    public boolean todoCorrecto = true;

    public SintaxTMP(AnalizadorLexico4 lex, ArrayList<Tiempos> listTiempos){
        super(lex);
        this.listTiempos = listTiempos;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
        if(totalErrores.equals("")){
            totalErrores = "ERROR: Error sintaxis. Linea: "+s.left+" Columna: "+s.right+".\n";
        } else {
            totalErrores += "ERROR: Error sintaxis. Linea: "+s.left+" Columna: "+s.right+".\n";
        }
    }

    public void traspasarDatosArreglo(ArrayList<Tiempos> listTiempos, ArrayList<Tiempos> listTemporal){
        for(int i = 0; i < listTemporal.size(); i++){
            listTiempos.add(listTemporal.get(i));
        }
    }
        
    //seguir con esto ma;ana xd guardar los datos en un arraylist para usarlos en la otra plataforma
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxTMP$actions {
  private final SintaxTMP parser;

  /** Constructor */
  CUP$SintaxTMP$actions(SintaxTMP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxTMP$do_action(
    int                        CUP$SintaxTMP$act_num,
    java_cup.runtime.lr_parser CUP$SintaxTMP$parser,
    java.util.Stack            CUP$SintaxTMP$stack,
    int                        CUP$SintaxTMP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxTMP$result;

      /* select the action based on the action number */
      switch (CUP$SintaxTMP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMA4 ::= 
            {
              ImagenesTiempo RESULT =null;
		 ImagenesTiempo imagen = new ImagenesTiempo(); RESULT=imagen; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA4",7, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMA4 ::= COMA e 
            {
              ImagenesTiempo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ImagenesTiempo a = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA4",7, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMA3 ::= 
            {
              ArrayList<ImagenesTiempo> RESULT =null;
		 ArrayList<ImagenesTiempo> listImagenes = new ArrayList<>(); RESULT=listImagenes; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA3",5, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMA3 ::= COMA d 
            {
              ArrayList<ImagenesTiempo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<ImagenesTiempo> a = (ArrayList<ImagenesTiempo>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA3",5, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMA2 ::= 
            {
              Tiempos RESULT =null;
		 Tiempos tiempo = new Tiempos(); RESULT=tiempo; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA2",4, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMA2 ::= COMA c 
            {
              Tiempos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA2",4, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMA1 ::= 
            {
              ArrayList<Tiempos> RESULT =null;
		 ArrayList<Tiempos> listTiempos = new ArrayList<>(); RESULT=listTiempos; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA1",1, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMA1 ::= COMA b 
            {
              ArrayList<Tiempos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<Tiempos> a = (ArrayList<Tiempos>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("COMA1",1, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // e ::= error COMA4 
            {
              ImagenesTiempo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ImagenesTiempo a = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 parser.totalErrores += "\tAtributo en campo IMAGENES definido de forma incorrecta.\n"; parser.todoCorrecto = false; RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // e ::= duracion DOS_PUNTOS NUMERO COMA4 
            {
              ImagenesTiempo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ImagenesTiempo a = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getDuracion() == null){ a.setDuracion((Integer) b); } else { parser.totalErrores += "Ya existe un atributo duracion en campo IMAGENES. Linea: "+bleft+".\n"; parser.todoCorrecto = false;  } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // e ::= id DOS_PUNTOS COMILLAS ID COMILLAS COMA4 
            {
              ImagenesTiempo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ImagenesTiempo a = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getId() == null){ a.setId(b.toString()); } else { parser.totalErrores += "Ya existe un atributo Id en campo IMAGENES. Linea: "+bleft+".\n"; parser.todoCorrecto = false; } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("e",8, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // d ::= LLAVE_A e LLAVE_B COMA3 
            {
              ArrayList<ImagenesTiempo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		ImagenesTiempo b = (ImagenesTiempo)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<ImagenesTiempo> a = (ArrayList<ImagenesTiempo>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		   if(b.getId() == null || b.getDuracion() == null){ parser.totalErrores += "Falta de un atributo dentro del bloque IMAGENES. Linea: "+bleft+" Columna: "+bright+".\n"; parser.todoCorrecto = false;  } else { a.add(b); } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("d",6, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // c ::= imagenes DOS_PUNTOS AGRUPACION_A d AGRUPACION_B COMA2 
            {
              Tiempos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		ArrayList<ImagenesTiempo> b = (ArrayList<ImagenesTiempo>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getTransiciones() == null)  { a.setTransiciones(b);  } else { parser.totalErrores += "El campo IMAGENES ya ha sido definido previamente. Linea:"+bleft+" Columna: "+bright+".\n"; parser.todoCorrecto = false; } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // c ::= fin DOS_PUNTOS COMILLAS ID COMILLAS COMA2 
            {
              Tiempos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getLienzoFin() == null) { a.setLienzoFin(b.toString()); } else { parser.totalErrores += "El atributo Fin ya ha sido definido previamente. Linea: "+bleft+" Columna: "+bright+".\n"; parser.todoCorrecto = false; } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // c ::= inicio DOS_PUNTOS COMILLAS ID COMILLAS COMA2 
            {
              Tiempos RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getLienzoInicio() == null) { a.setLienzoInicio(b.toString()); } else { parser.totalErrores += "El atributo Inicio ya ha sido definido previamente. Linea: "+bleft+" Columna: "+bright+".\n"; parser.todoCorrecto = false; } RESULT=a; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("c",3, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // b ::= error COMA1 
            {
              ArrayList<Tiempos> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<Tiempos> b = (ArrayList<Tiempos>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 parser.totalErrores += "\tAtributo principal definido de forma incorrecta.\n"; parser.todoCorrecto = false; RESULT=b; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= ID DOS_PUNTOS LLAVE_A c LLAVE_B COMA1 
            {
              ArrayList<Tiempos> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		Tiempos a = (Tiempos)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()).right;
		ArrayList<Tiempos> b = (ArrayList<Tiempos>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.peek()).value;
		 if(a.getLienzoInicio() == null || a.getLienzoFin() == null || a.getTransiciones() == null){ parser.totalErrores += "Falta de un atributo principal en lienzo: "+c.toString()+". Linea: "+aleft+" Columna: "+aright+".\n"; parser.todoCorrecto = false; } else { a.setNombreLienzo(c.toString()); b.add(a); } RESULT=b; 
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("b",2, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= LLAVE_A TIEMPOS DOS_PUNTOS LLAVE_A b LLAVE_B LLAVE_B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).right;
		ArrayList<Tiempos> a = (ArrayList<Tiempos>)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-2)).value;
		 if(parser.todoCorrecto){ parser.traspasarDatosArreglo(parser.listTiempos, a); } else { parser.totalErrores += "Debido a multiples errores, no se puede continuar con el proceso.\n"; }   if(!parser.totalErrores.equals("")){ InterfazTexto.bandejaErrores += "ERRORES .TMP:\n"; InterfazTexto.bandejaErrores += parser.totalErrores; InterfazTexto.bandejaErrores += "--------------------------------------------------------\n"; parser.totalErrores = "";  }  
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          return CUP$SintaxTMP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)).value;
		RESULT = start_val;
              CUP$SintaxTMP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.elementAt(CUP$SintaxTMP$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxTMP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxTMP$parser.done_parsing();
          return CUP$SintaxTMP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

