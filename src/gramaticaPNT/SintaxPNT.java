
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 14 22:27:18 CST 2020
//----------------------------------------------------

package gramaticaPNT;

import java_cup.runtime.Symbol;
import pollitos.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 14 22:27:18 CST 2020
  */
public class SintaxPNT extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPNT() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPNT(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\030\011\000\002\034\002\000\002\030\010" +
    "\000\002\035\002\000\002\030\014\000\002\036\002\000" +
    "\002\030\010\000\002\037\002\000\002\030\010\000\002" +
    "\040\002\000\002\030\012\000\002\041\002\000\002\030" +
    "\012\000\002\030\002\000\002\032\004\000\002\032\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\002\000\002\004\005\000\002" +
    "\004\007\000\002\004\002\000\002\042\002\000\002\005" +
    "\012\000\002\043\002\000\002\005\006\000\002\005\002" +
    "\000\002\044\002\000\002\031\006\000\002\045\002\000" +
    "\002\031\010\000\002\046\002\000\002\031\010\000\002" +
    "\031\002\000\002\010\012\000\002\011\016\000\002\011" +
    "\012\000\002\011\016\000\002\011\012\000\002\011\004" +
    "\000\002\011\002\000\002\007\006\000\002\007\010\000" +
    "\002\007\006\000\002\007\006\000\002\012\006\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\013" +
    "\003\000\002\013\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\002\000\002\016\003\000\002\016\005\000" +
    "\002\017\003\000\002\017\005\000\002\020\003\000\002" +
    "\020\005\000\002\025\003\000\002\025\002\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\033\006\001\002\000\004\041\141\001" +
    "\002\000\004\002\140\001\002\000\004\024\007\001\002" +
    "\000\012\025\ufff1\034\013\035\010\036\012\001\002\000" +
    "\004\047\111\001\002\000\004\025\110\001\002\000\004" +
    "\047\055\001\002\000\004\047\014\001\002\000\010\004" +
    "\ufffd\006\ufffd\012\016\001\002\000\006\004\022\006\uffe7" +
    "\001\002\000\006\046\017\047\020\001\002\000\022\004" +
    "\uffea\006\uffea\010\uffea\023\uffea\026\040\027\042\030\044" +
    "\052\043\001\002\000\022\004\uffea\006\uffea\010\uffea\023" +
    "\uffea\026\040\027\042\030\044\052\043\001\002\000\006" +
    "\004\022\006\uffe7\001\002\000\006\046\026\047\027\001" +
    "\002\000\004\006\024\001\002\000\012\025\ufff1\034\013" +
    "\035\010\036\012\001\002\000\004\025\ufffe\001\002\000" +
    "\020\004\uffea\006\uffea\012\uffca\026\040\027\042\030\044" +
    "\052\043\001\002\000\020\004\uffea\006\uffea\012\uffcb\026" +
    "\040\027\042\030\044\052\043\001\002\000\006\004\022" +
    "\006\uffe7\001\002\000\004\012\032\001\002\000\006\046" +
    "\033\047\034\001\002\000\032\004\uffca\006\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\023" +
    "\uffca\050\uffca\051\uffca\001\002\000\014\004\uffcb\006\uffcb" +
    "\023\uffcb\050\uffcb\051\uffcb\001\002\000\006\004\022\006" +
    "\uffe7\001\002\000\004\006\uffe8\001\002\000\004\006\uffe9" +
    "\001\002\000\006\046\017\047\020\001\002\000\012\004" +
    "\uffef\006\uffef\010\uffef\023\uffef\001\002\000\006\046\017" +
    "\047\020\001\002\000\006\046\017\047\020\001\002\000" +
    "\006\046\017\047\020\001\002\000\012\004\uffee\006\uffee" +
    "\010\uffee\023\uffee\001\002\000\012\004\uffeb\006\uffeb\010" +
    "\uffeb\023\uffeb\001\002\000\012\004\uffec\006\uffec\010\uffec" +
    "\023\uffec\001\002\000\012\004\uffed\006\uffed\010\uffed\023" +
    "\uffed\001\002\000\012\004\ufff0\006\ufff0\010\ufff0\023\ufff0" +
    "\001\002\000\004\006\053\001\002\000\012\025\ufff1\034" +
    "\013\035\010\036\012\001\002\000\004\025\ufffc\001\002" +
    "\000\010\004\ufff7\006\ufff7\012\057\001\002\000\006\004" +
    "\063\006\uffdb\001\002\000\006\037\060\040\061\001\002" +
    "\000\006\004\ufff5\006\ufff5\001\002\000\006\004\ufff3\006" +
    "\ufff3\001\002\000\006\004\063\006\uffdb\001\002\000\004" +
    "\047\067\001\002\000\004\006\065\001\002\000\012\025" +
    "\ufff1\034\013\035\010\036\012\001\002\000\004\025\ufff2" +
    "\001\002\000\010\004\uffe1\006\uffe1\012\070\001\002\000" +
    "\006\037\073\040\074\001\002\000\006\004\063\006\uffdb" +
    "\001\002\000\004\006\uffe0\001\002\000\006\004\uffdf\006" +
    "\uffdf\001\002\000\006\004\uffdd\006\uffdd\001\002\000\006" +
    "\004\063\006\uffdb\001\002\000\004\006\uffdc\001\002\000" +
    "\006\004\063\006\uffdb\001\002\000\004\006\uffde\001\002" +
    "\000\006\004\063\006\uffdb\001\002\000\004\006\103\001" +
    "\002\000\012\025\ufff1\034\013\035\010\036\012\001\002" +
    "\000\004\025\ufff4\001\002\000\004\006\106\001\002\000" +
    "\012\025\ufff1\034\013\035\010\036\012\001\002\000\004" +
    "\025\ufff6\001\002\000\004\041\uffff\001\002\000\010\004" +
    "\ufff9\006\ufff9\012\113\001\002\000\006\004\121\006\uffe2" +
    "\001\002\000\004\007\114\001\002\000\004\047\115\001" +
    "\002\000\004\007\116\001\002\000\006\004\ufffb\006\ufffb" +
    "\001\002\000\006\004\121\006\uffe2\001\002\000\004\006" +
    "\133\001\002\000\004\047\122\001\002\000\010\004\uffe4" +
    "\006\uffe4\012\123\001\002\000\004\007\126\001\002\000" +
    "\006\004\121\006\uffe2\001\002\000\004\006\uffe3\001\002" +
    "\000\004\047\127\001\002\000\004\007\130\001\002\000" +
    "\006\004\uffe6\006\uffe6\001\002\000\006\004\121\006\uffe2" +
    "\001\002\000\004\006\uffe5\001\002\000\012\025\ufff1\034" +
    "\013\035\010\036\012\001\002\000\004\025\ufffa\001\002" +
    "\000\004\006\136\001\002\000\012\025\ufff1\034\013\035" +
    "\010\036\012\001\002\000\004\025\ufff8\001\002\000\004" +
    "\002\001\001\002\000\004\022\143\001\002\000\004\002" +
    "\000\001\002\000\004\047\144\001\002\000\004\023\145" +
    "\001\002\000\004\024\146\001\002\000\014\025\uffd4\042" +
    "\150\043\154\045\153\047\147\001\002\000\004\012\257" +
    "\001\002\000\004\022\231\001\002\000\004\025\226\001" +
    "\002\000\016\021\uffd4\025\uffd4\042\150\043\154\045\153" +
    "\047\147\001\002\000\004\022\216\001\002\000\004\022" +
    "\155\001\002\000\012\037\161\040\162\046\033\047\156" +
    "\001\002\000\026\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\023\uffc7\050\163\051\165\001\002" +
    "\000\020\011\204\012\205\013\206\014\207\015\211\016" +
    "\212\017\210\001\002\000\004\023\171\001\002\000\010" +
    "\023\uffc7\050\163\051\165\001\002\000\010\023\uffc7\050" +
    "\163\051\165\001\002\000\012\037\161\040\162\046\033" +
    "\047\156\001\002\000\004\023\uffcc\001\002\000\012\037" +
    "\161\040\162\046\033\047\156\001\002\000\004\023\uffc8" +
    "\001\002\000\004\023\uffc9\001\002\000\004\023\uffcd\001" +
    "\002\000\004\020\172\001\002\000\014\021\uffd4\042\150" +
    "\043\154\045\153\047\147\001\002\000\004\021\174\001" +
    "\002\000\020\021\uffd4\025\uffd4\042\150\043\154\044\175" +
    "\045\153\047\147\001\002\000\004\020\177\001\002\000" +
    "\006\021\uffd8\025\uffd8\001\002\000\014\021\uffd4\042\150" +
    "\043\154\045\153\047\147\001\002\000\004\021\201\001" +
    "\002\000\016\021\uffd4\025\uffd4\042\150\043\154\045\153" +
    "\047\147\001\002\000\006\021\uffd7\025\uffd7\001\002\000" +
    "\006\046\033\047\034\001\002\000\006\046\uffbe\047\uffbe" +
    "\001\002\000\006\046\uffbd\047\uffbd\001\002\000\006\046" +
    "\uffbc\047\uffbc\001\002\000\006\046\uffbb\047\uffbb\001\002" +
    "\000\006\046\uffb8\047\uffb8\001\002\000\006\046\uffba\047" +
    "\uffba\001\002\000\006\046\uffb9\047\uffb9\001\002\000\010" +
    "\023\uffc7\050\163\051\165\001\002\000\004\023\uffcf\001" +
    "\002\000\004\023\uffce\001\002\000\012\037\161\040\162" +
    "\046\033\047\156\001\002\000\004\023\220\001\002\000" +
    "\004\020\221\001\002\000\014\021\uffd4\042\150\043\154" +
    "\045\153\047\147\001\002\000\004\021\223\001\002\000" +
    "\016\021\uffd4\025\uffd4\042\150\043\154\045\153\047\147" +
    "\001\002\000\006\021\uffd6\025\uffd6\001\002\000\006\021" +
    "\uffd5\025\uffd5\001\002\000\006\002\uffbf\041\141\001\002" +
    "\000\004\002\uffda\001\002\000\004\002\uffc0\001\002\000" +
    "\006\007\234\047\232\001\002\000\004\004\uffc6\001\002" +
    "\000\004\004\237\001\002\000\004\047\235\001\002\000" +
    "\004\007\236\001\002\000\004\004\uffc5\001\002\000\006" +
    "\007\242\047\240\001\002\000\004\004\uffc4\001\002\000" +
    "\004\004\245\001\002\000\004\047\243\001\002\000\004" +
    "\007\244\001\002\000\004\004\uffc3\001\002\000\006\046" +
    "\017\047\020\001\002\000\010\004\uffc2\010\255\023\uffc2" +
    "\001\002\000\004\004\250\001\002\000\006\046\017\047" +
    "\020\001\002\000\004\023\252\001\002\000\004\006\253" +
    "\001\002\000\016\021\uffd4\025\uffd4\042\150\043\154\045" +
    "\153\047\147\001\002\000\006\021\uffd9\025\uffd9\001\002" +
    "\000\006\046\017\047\020\001\002\000\006\004\uffc1\023" +
    "\uffc1\001\002\000\014\007\263\037\261\040\262\046\017" +
    "\047\020\001\002\000\004\006\271\001\002\000\004\006" +
    "\270\001\002\000\004\006\267\001\002\000\004\047\264" +
    "\001\002\000\004\007\265\001\002\000\004\006\266\001" +
    "\002\000\016\021\uffd2\025\uffd2\042\uffd2\043\uffd2\045\uffd2" +
    "\047\uffd2\001\002\000\016\021\uffd0\025\uffd0\042\uffd0\043" +
    "\uffd0\045\uffd0\047\uffd0\001\002\000\016\021\uffd1\025\uffd1" +
    "\042\uffd1\043\uffd1\045\uffd1\047\uffd1\001\002\000\016\021" +
    "\uffd3\025\uffd3\042\uffd3\043\uffd3\045\uffd3\047\uffd3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\002\004\003\003\001\001\000\004\010" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\014\001\001" +
    "\000\004\004\051\001\001\000\004\032\020\001\001\000" +
    "\004\033\050\001\001\000\004\033\040\001\001\000\004" +
    "\004\022\001\001\000\006\013\030\032\027\001\001\000" +
    "\002\001\001\000\004\030\024\001\001\000\002\001\001" +
    "\000\004\033\050\001\001\000\004\033\040\001\001\000" +
    "\004\004\036\001\001\000\002\001\001\000\004\013\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\047\001\001\000\002\001\001\000\004\032\046\001" +
    "\001\000\004\032\045\001\001\000\004\032\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\053\001\001\000\002\001\001\000\004\037\055\001" +
    "\001\000\004\031\104\001\001\000\002\001\001\000\004" +
    "\040\100\001\001\000\004\041\061\001\001\000\004\031" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\065\001\001\000\002\001\001\000\004\044\070\001" +
    "\001\000\002\001\001\000\004\031\071\001\001\000\002" +
    "\001\001\000\004\045\076\001\001\000\004\046\074\001" +
    "\001\000\004\031\075\001\001\000\002\001\001\000\004" +
    "\031\077\001\001\000\002\001\001\000\004\031\101\001" +
    "\001\000\002\001\001\000\004\030\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\111\001\001" +
    "\000\004\005\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\116\001\001\000\004" +
    "\005\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\123\001\001\000\002\001\001\000\004\005\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\130\001\001\000\004\005\131\001\001" +
    "\000\002\001\001\000\004\030\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\151\011\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\151\011\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\157\013\156\001\001\000\004\026\214\001\001\000\004" +
    "\027\202\001\001\000\002\001\001\000\004\026\167\001" +
    "\001\000\004\026\163\001\001\000\006\012\166\013\156" +
    "\001\001\000\002\001\001\000\006\012\165\013\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\151\011\172\001\001\000" +
    "\002\001\001\000\006\007\151\011\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\151\011\177\001" +
    "\001\000\002\001\001\000\006\007\151\011\201\001\001" +
    "\000\002\001\001\000\004\013\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\216\013\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\151\011\221\001\001\000\002" +
    "\001\001\000\006\007\151\011\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\227\025\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\246\032" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\250\032\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\151\011\253\001\001\000\002\001\001" +
    "\000\004\032\255\001\001\000\002\001\001\000\004\032" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPNT$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPNT$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPNT$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public ArrayList<ValoresPNT> listValores;
    public TablaSimbolos tabla;

    public SintaxPNT(AnalizadorLexico3 lex, ArrayList<ValoresPNT> listValores, TablaSimbolos tabla){
        super(lex);
        this.listValores = listValores;
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo + " " + mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPNT$actions {
  private final SintaxPNT parser;

  /** Constructor */
  CUP$SintaxPNT$actions(SintaxPNT parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPNT$do_action(
    int                        CUP$SintaxPNT$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPNT$parser,
    java.util.Stack            CUP$SintaxPNT$stack,
    int                        CUP$SintaxPNT$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPNT$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPNT$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relacional ::= DIFERENCIA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relacional ::= MENOR 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relacional ::= IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relacional ::= DOBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("relacional",21, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMA4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COMA4 ::= c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("COMA4",19, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // posX ::= b2 RANGO b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // posX ::= b2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("posX",14, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // idImagen ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // idImagen ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idImagen",13, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // idColor ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",12, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // idColor ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("idColor",12, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ext ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ext ::= OR c2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ext ::= AND c2 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("ext",20, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c3 ::= NUMERO 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",9, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // c3 ::= ID 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c3",9, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // c2 ::= FALSE ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c2 ::= TRUE ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c2 ::= ID ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // c2 ::= c3 relacional c3 ext 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c2",8, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // b8 ::= ID IGUAL FALSE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // b8 ::= ID IGUAL TRUE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // b8 ::= ID IGUAL COMILLAS ID COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // b8 ::= ID IGUAL b2 PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b8",5, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c1 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // c1 ::= b8 c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c1 ::= WHILE PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // c1 ::= IF PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B ELSE LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c1 ::= IF PARENTESIS_A c2 PARENTESIS_B LLAVE_A c1 LLAVE_B c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c1 ::= PINTAR PARENTESIS_A idColor COMA idImagen COMA posX COMA posX PARENTESIS_B PUNTO_COMA c1 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c1",7, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c ::= INSTRUCCIONES PARENTESIS_A ID PARENTESIS_B AGRUPACION_A c1 AGRUPACION_B COMA4 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("c",6, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // b5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // b5 ::= COMA ID IGUAL FALSE NT$10 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$10 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) {  ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$10",36, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // b5 ::= COMA ID IGUAL TRUE NT$9 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$9 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true);  parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$9",35, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // b5 ::= COMA ID NT$8 b5 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b5",23, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)) { ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); parser.listValores.add(valor); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$8",34, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // b4 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // b4 ::= COMA ID NT$7 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor);  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // b4 ::= COMA ID IGUAL COMILLAS ID COMILLAS NT$6 b4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b4",3, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // b3 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // b3 ::= COMA c3 IGUAL c3 b3 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // b3 ::= COMA b2 b3 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b3",2, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // b2prima ::= 
            {
              ArrayList<OperacionesPNT> RESULT =null;
		 ArrayList<OperacionesPNT> listOperaciones = new ArrayList<>(); RESULT=listOperaciones; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // b2prima ::= DIV b2 
            {
              ArrayList<OperacionesPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<OperacionesPNT> a = (ArrayList<OperacionesPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OperacionesPNT op = new OperacionesPNT(); op.setOperacion("DIV"); a.add(op); RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // b2prima ::= MENOS b2 
            {
              ArrayList<OperacionesPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<OperacionesPNT> a = (ArrayList<OperacionesPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OperacionesPNT op = new OperacionesPNT(); op.setOperacion("MENOS"); a.add(op); RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b2prima ::= MAS b2 
            {
              ArrayList<OperacionesPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<OperacionesPNT> a = (ArrayList<OperacionesPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OperacionesPNT op = new OperacionesPNT(); op.setOperacion("MAS"); a.add(op); RESULT=a; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b2prima ::= POR b2 
            {
              ArrayList<OperacionesPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<OperacionesPNT> a = (ArrayList<OperacionesPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OperacionesPNT op = new OperacionesPNT(); op.setOperacion("MULT"); a.add(op); RESULT=a;  
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2prima",25, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b2 ::= ID b2prima 
            {
              ArrayList<OperacionesPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<OperacionesPNT> b = (ArrayList<OperacionesPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OperacionesPNT op = new OperacionesPNT(); if(parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer") == null){ op.setError(true); } else { op.setNumero((Integer) parser.tabla.verificarUnValor(a.toString(), parser.listValores, "Integer")); } b.add(op); RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b2 ::= NUMERO b2prima 
            {
              ArrayList<OperacionesPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		ArrayList<OperacionesPNT> b = (ArrayList<OperacionesPNT>)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
		 OperacionesPNT op = new OperacionesPNT(); op.setNumero((Integer) a); b.add(op); RESULT=b; 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b2",24, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b1 ::= BOOLEAN ID IGUAL FALSE NT$5 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, false);  } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b1 ::= BOOLEAN ID IGUAL TRUE NT$4 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-2)).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, true); } else { /*aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b1 ::= BOOLEAN ID NT$3 b5 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 if(!parser.tabla.verificarId(a.toString(), parser.listValores)){ ValoresPNT valor = new ValoresPNT("Boolean", a.toString(), null, null, null); } else { /*Aqui ira un mensaje*/ } 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // b1 ::= STRING ID NT$2 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), null, null, null);  parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // b1 ::= STRING ID IGUAL COMILLAS ID COMILLAS NT$1 b4 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
 ValoresPNT valor = new ValoresPNT("String", a.toString(), b.toString(), null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // b1 ::= INT ID NT$0 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ArrayList<ValoresPNT>) ((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-4)).value;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              ArrayList<ValoresPNT> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.peek()).value;
 ValoresPNT valor = new ValoresPNT("Integer", a.toString(), null, null, null); parser.tabla.agregarDato(parser.listValores, valor); 
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // b1 ::= INT ID IGUAL b2 b3 PUNTO_COMA b1 
            {
              ArrayList<ValoresPNT> RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b1",22, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // b ::= VARS AGRUPACION_A b1 AGRUPACION_B 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("b",1, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // a ::= b c 
            {
              Object RESULT =null;

              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("a",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          return CUP$SintaxPNT$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= a EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPNT$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.elementAt(CUP$SintaxPNT$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPNT$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPNT$parser.done_parsing();
          return CUP$SintaxPNT$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

